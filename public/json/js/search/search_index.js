var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/SchemaManager.html",[0,0.987,1,0.987]],["body/classes/SchemaManager.html",[0,0.315,1,0.716,2,0.703,3,0.703,4,0.703,5,1.593,6,1.833,7,0.404,8,0.244,9,0.543,10,2.771,11,1.596,12,1.596,13,1.596,14,3.508,15,3.052,16,1.592,17,2.061,18,2.507,19,1.97,20,1.211,21,3.125,22,1.898,23,1.865,24,1.898,25,1.898,26,1.898,27,0.703,28,1.211,29,1.091,30,3.125,31,1.211,32,0.901,33,0.099,34,0.901,35,0.922,36,0.901,37,0.703,38,0.703,39,1.431,40,1.593,41,2.341,42,1.211,43,0.703,44,1.596,45,2.141,46,0.703,47,1.211,48,0.703,49,1.596,50,1.833,51,0.703,52,1.211,53,1.503,54,1.74,55,0.703,56,2.061,57,0.703,58,1.211,59,1.211,60,0.703,61,1.74,62,1.211,63,0.703,64,1.187,65,2.416,66,2.141,67,0.703,68,0.703,69,1.211,70,1.592,71,0.901,72,1.187,73,0.901,74,1.187,75,1.596,76,1.412,77,1.412,78,1.345,79,1.596,80,1.592,81,1.211,82,0.901,83,0.703,84,1.211,85,0.901,86,1.412,87,1.412,88,1.211,89,0.901,90,0.703,91,2.141,92,0.703,93,0.703,94,0.703,95,0.703,96,0.523,97,0.703,98,1.898,99,0.901,100,0.703,101,0.703,102,0.703,103,0.703,104,0.703,105,0.703,106,0.703,107,1.596,108,0.703,109,0.523,110,0.523,111,0.918,112,0.901,113,0.703,114,0.523,115,0.703,116,0.703,117,0.703,118,0.703,119,0.703,120,0.703,121,1.211,122,0.703,123,0.703,124,0.703,125,0.703,126,1.898,127,0.703,128,0.703,129,1.211,130,2.341,131,0.703,132,0.703,133,2.341,134,0.703,135,0.703,136,0.703,137,0.703,138,0.703,139,0.703,140,0.703,141,0.703,142,0.703,143,0.703,144,1.211,145,0.703,146,0.703,147,0.703,148,0.703,149,0.703,150,1.211,151,0.703,152,0.703,153,0.523,154,1.596,155,0.523,156,1.211,157,0.703,158,0.703,159,0.703,160,0.703,161,0.523,162,0.703,163,0.703,164,0.703,165,0.703,166,0.703,167,0.703,168,0.703,169,0.703,170,0.703,171,0.028,172,0.028]],["title/coverage.html",[173,2.179]],["body/coverage.html",[0,0.828,1,0.828,5,1.061,6,1.727,7,1.727,29,1.061,33,0.096,35,1.135,39,0.828,53,1.348,54,1.372,78,1.493,111,1.061,153,2.724,171,0.061,172,0.061,173,1.372,174,1.845,175,1.845,176,1.845,177,1.493,178,3.991,179,1.372,180,3.663,181,1.845,182,1.372,183,1.372,184,3.853,185,3.853,186,1.372,187,1.372,188,1.372,189,1.372,190,1.372,191,1.372,192,1.372,193,1.931,194,1.372,195,1.845,196,1.845,197,2.597,198,1.372,199,1.372,200,1.372,201,2.652,202,1.931,203,1.372,204,1.372,205,1.931,206,1.372,207,1.372,208,1.372,209,1.372,210,1.372,211,1.372,212,1.372,213,1.372,214,1.372,215,1.845,216,1.845]],["title/dependencies.html",[217,1.394,218,1.953]],["body/dependencies.html",[33,0.093,171,0.085,172,0.085,218,2.333,219,3.137,220,3.137,221,3.137,222,3.137]],["title/miscellaneous/functions.html",[223,0.495,224,1.953]],["body/miscellaneous/functions.html",[5,0.71,8,0.43,9,0.554,16,0.919,17,2.39,19,1.991,23,1.763,32,2.54,33,0.092,34,2.54,35,1.275,36,2.54,39,1.303,40,0.71,50,2.008,53,1.71,56,0.919,61,2.646,64,2.598,65,0.919,70,1.433,71,0.919,72,1.433,73,1.991,74,1.763,76,1.763,77,1.763,78,1.669,80,0.919,82,0.919,85,1.433,86,0.919,87,1.433,89,1.433,96,0.919,112,0.919,114,0.919,155,1.991,161,1.763,171,0.045,172,0.045,177,0.71,179,1.763,183,0.919,186,0.919,187,0.919,188,1.433,189,1.763,190,0.919,191,0.919,192,2.159,193,1.991,194,1.433,198,0.919,199,1.433,200,1.433,201,1.991,202,1.763,203,1.433,204,1.433,205,1.763,206,1.433,207,1.433,208,1.433,209,1.433,210,1.433,211,1.433,212,0.919,213,1.433,214,1.433,223,0.326,224,0.919,225,3.077,226,1.235,227,0.919,228,1.235,229,1.235,230,1.235,231,1.235,232,1.235,233,1.235,234,1.235,235,1.928,236,2.37,237,1.235,238,1.235,239,1.928,240,1.928,241,3.324,242,1.235,243,1.928,244,1.235,245,1.235,246,1.235,247,1.235,248,1.928,249,1.235,250,1.235,251,1.235,252,1.235,253,1.235,254,1.235,255,1.928,256,1.235,257,1.235,258,1.235,259,1.235]],["title/index.html",[8,0.652,260,1.874,261,1.874]],["body/index.html",[33,0.086,171,0.086,172,0.086,262,3.154,263,3.154,264,3.154,265,3.669,266,3.154]],["title/modules.html",[267,2.179]],["body/modules.html",[33,0.087,171,0.087,172,0.087,267,2.41]],["title/overview.html",[268,2.179]],["body/overview.html",[0,1.438,33,0.086,171,0.086,172,0.086,268,2.384,269,3.206]],["title/properties.html",[9,1.178,217,1.394]],["body/properties.html",[9,1.43,33,0.091,171,0.086,172,0.086,270,3.189,271,3.189]],["title/miscellaneous/typealiases.html",[223,0.495,272,2.626]],["body/miscellaneous/typealiases.html",[1,1.303,6,1.669,7,2.154,8,1.01,29,2.008,33,0.082,35,1.304,53,1.303,99,2.16,109,2.16,110,2.16,111,2.008,171,0.082,172,0.082,223,0.767,273,2.905,274,3.494,275,2.905]],["title/miscellaneous/variables.html",[223,0.495,276,1.953]],["body/miscellaneous/variables.html",[8,1.052,33,0.092,35,1.052,39,1.357,40,1.738,50,1.738,171,0.084,172,0.084,177,1.738,182,2.662,223,0.799,227,2.249,276,2.249,277,3.024]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":153,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["0/1",{"_index":180,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":269,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":185,"title":{},"body":{"coverage.html":{}}}],["10/14",{"_index":196,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":184,"title":{},"body":{"coverage.html":{}}}],["13.1.0",{"_index":222,"title":{},"body":{"dependencies.html":{}}}],["20.3.2",{"_index":220,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":195,"title":{},"body":{"coverage.html":{}}}],["8.1.1",{"_index":271,"title":{},"body":{"properties.html":{}}}],["__toabsolutepaths",{"_index":203,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["__toabsolutepaths(root",{"_index":234,"title":{},"body":{"miscellaneous/functions.html":{}}}],["__toabsolutereferencepaths",{"_index":149,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__toabsolutereferencepaths(value",{"_index":162,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__todefinition",{"_index":206,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["__todefinition(jsonschema",{"_index":238,"title":{},"body":{"miscellaneous/functions.html":{}}}],["absolute",{"_index":78,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["alias",{"_index":197,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":273,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["async",{"_index":21,"title":{},"body":{"classes/SchemaManager.html":{}}}],["await",{"_index":130,"title":{},"body":{"classes/SchemaManager.html":{}}}],["brighline",{"_index":262,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/SchemaManager.html":{}},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/SchemaManager.html":{}}}],["commander",{"_index":221,"title":{},"body":{"dependencies.html":{}}}],["common",{"_index":266,"title":{},"body":{"index.html":{}}}],["comon",{"_index":264,"title":{},"body":{"index.html":{}}}],["compile",{"_index":22,"title":{},"body":{"classes/SchemaManager.html":{}}}],["compiler",{"_index":249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":188,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":133,"title":{},"body":{"classes/SchemaManager.html":{}}}],["constructor",{"_index":27,"title":{},"body":{"classes/SchemaManager.html":{}}}],["constructor(options",{"_index":28,"title":{},"body":{"classes/SchemaManager.html":{}}}],["content",{"_index":240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convert",{"_index":235,"title":{},"body":{"miscellaneous/functions.html":{}}}],["coverage",{"_index":173,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":39,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmainfilepath",{"_index":11,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultoutuptpath",{"_index":12,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultrootpath",{"_index":13,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defined",{"_index":30,"title":{},"body":{"classes/SchemaManager.html":{}}}],["definition",{"_index":155,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["definitions",{"_index":77,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["definitions.ts",{"_index":205,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dependencies",{"_index":218,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descendant",{"_index":69,"title":{},"body":{"classes/SchemaManager.html":{}}}],["directory",{"_index":56,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["dirpath",{"_index":75,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dist",{"_index":45,"title":{},"body":{"classes/SchemaManager.html":{}}}],["distfilepath",{"_index":165,"title":{},"body":{"classes/SchemaManager.html":{}}}],["documentation",{"_index":174,"title":{},"body":{"coverage.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["empty",{"_index":248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entiry",{"_index":52,"title":{},"body":{"classes/SchemaManager.html":{}}}],["error(`the",{"_index":147,"title":{},"body":{"classes/SchemaManager.html":{}}}],["export",{"_index":107,"title":{},"body":{"classes/SchemaManager.html":{}}}],["extract",{"_index":135,"title":{},"body":{"classes/SchemaManager.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["file.ts",{"_index":193,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":79,"title":{},"body":{"classes/SchemaManager.html":{}}}],["filepath",{"_index":65,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["filepath.replace(this.root",{"_index":166,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachjsonschemafile",{"_index":92,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachjsonschemafile(this.root",{"_index":132,"title":{},"body":{"classes/SchemaManager.html":{}}}],["function",{"_index":178,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":224,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getconfig",{"_index":189,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getlastsegment",{"_index":101,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getlastsegment(filepath",{"_index":138,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getting",{"_index":260,"title":{"index.html":{}},"body":{}}],["haskeys",{"_index":102,"title":{},"body":{"classes/SchemaManager.html":{}}}],["haskeys(schema",{"_index":144,"title":{},"body":{"classes/SchemaManager.html":{}}}],["identifier",{"_index":175,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":91,"title":{},"body":{"classes/SchemaManager.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/SchemaManager.html":{}}}],["init",{"_index":179,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["initialize",{"_index":258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["int",{"_index":88,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute",{"_index":105,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(schema.$ref",{"_index":158,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.main",{"_index":127,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.output",{"_index":128,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.root",{"_index":125,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath",{"_index":103,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(schema.$ref",{"_index":157,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join",{"_index":106,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join($filepath",{"_index":159,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(__dirname",{"_index":41,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(filepath",{"_index":143,"title":{},"body":{"classes/SchemaManager.html":{}}}],["json",{"_index":192,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["jsonschema",{"_index":64,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["key",{"_index":112,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["library",{"_index":246,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../get",{"_index":226,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../init.ts",{"_index":227,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["libs/.../me.ts",{"_index":228,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../read",{"_index":229,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../schema",{"_index":274,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../schema.ts",{"_index":230,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../set",{"_index":231,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../to",{"_index":225,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../type.ts",{"_index":232,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../validate",{"_index":233,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/json/src/lib/init/init.ts",{"_index":177,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["libs/json/src/lib/schema/schema.ts",{"_index":183,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/type/type.ts",{"_index":186,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/get",{"_index":187,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/me.ts",{"_index":190,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/read",{"_index":191,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/schema",{"_index":6,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["libs/json/src/lib/util/set",{"_index":198,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/to",{"_index":201,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/validate",{"_index":212,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["link",{"_index":113,"title":{},"body":{"classes/SchemaManager.html":{}}}],["literal",{"_index":275,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["main",{"_index":16,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["main.schema.json",{"_index":42,"title":{},"body":{"classes/SchemaManager.html":{}}}],["mainfilename",{"_index":255,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mainfilepath",{"_index":44,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager.ts:121",{"_index":83,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:149",{"_index":90,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:156",{"_index":60,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:36",{"_index":48,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:41",{"_index":43,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:46",{"_index":46,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:51",{"_index":57,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:55",{"_index":51,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:60",{"_index":55,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:67",{"_index":31,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:86",{"_index":63,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:95",{"_index":68,"title":{},"body":{"classes/SchemaManager.html":{}}}],["map",{"_index":17,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["map.ts",{"_index":208,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":172,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/SchemaManager.html":{}}}],["miscellaneous",{"_index":223,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":267,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":34,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":96,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["names(shortfilename).pascalcase",{"_index":140,"title":{},"body":{"classes/SchemaManager.html":{}}}],["new",{"_index":54,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["notabsolutepatherror",{"_index":98,"title":{},"body":{"classes/SchemaManager.html":{}}}],["nx/devkit",{"_index":219,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":161,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["object.entries(schema",{"_index":151,"title":{},"body":{"classes/SchemaManager.html":{}}}],["operations",{"_index":252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":36,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":37,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.mainfilepath",{"_index":119,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.output",{"_index":122,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.rootpath",{"_index":116,"title":{},"body":{"classes/SchemaManager.html":{}}}],["output",{"_index":18,"title":{},"body":{"classes/SchemaManager.html":{}}}],["outuptpath",{"_index":47,"title":{},"body":{"classes/SchemaManager.html":{}}}],["overview",{"_index":268,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":217,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":265,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":150,"title":{},"body":{"classes/SchemaManager.html":{}}}],["pairs.length",{"_index":152,"title":{},"body":{"classes/SchemaManager.html":{}}}],["param",{"_index":129,"title":{},"body":{"classes/SchemaManager.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":108,"title":{},"body":{"classes/SchemaManager.html":{}}}],["path",{"_index":80,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["pathf",{"_index":136,"title":{},"body":{"classes/SchemaManager.html":{}}}],["paths",{"_index":87,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["paths.ts",{"_index":202,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["pickrequired",{"_index":99,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/typealiases.html":{}}}],["prepare",{"_index":251,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepared",{"_index":148,"title":{},"body":{"classes/SchemaManager.html":{}}}],["project",{"_index":59,"title":{},"body":{"classes/SchemaManager.html":{}}}],["promise",{"_index":241,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["protected",{"_index":14,"title":{},"body":{"classes/SchemaManager.html":{}}}],["read",{"_index":23,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["read(filepath",{"_index":62,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readandmapschemasbyabsolutepath",{"_index":24,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile",{"_index":93,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile(filepath",{"_index":131,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonschemafile",{"_index":194,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["readjsonschemafile(filepath",{"_index":244,"title":{},"body":{"miscellaneous/functions.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"classes/SchemaManager.html":{}}}],["ready",{"_index":109,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/typealiases.html":{}}}],["readyjsonschema",{"_index":111,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ref",{"_index":236,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reference",{"_index":86,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["referenced",{"_index":259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relative",{"_index":85,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["required",{"_index":73,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":171,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"classes/SchemaManager.html":{}}}],["returns",{"_index":61,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["rline/fs",{"_index":95,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/names",{"_index":97,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/type",{"_index":100,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/utils",{"_index":104,"title":{},"body":{"classes/SchemaManager.html":{}}}],["root",{"_index":19,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["rootpath",{"_index":49,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schem",{"_index":58,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["schema.$dirpath",{"_index":142,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$filepath",{"_index":141,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$ref",{"_index":154,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.config.json",{"_index":277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.definitions",{"_index":145,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.title",{"_index":139,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.ts",{"_index":213,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["schema_config_file_name",{"_index":182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["schemamanager",{"_index":1,"title":{"classes/SchemaManager.html":{}},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["schemamanager.defaultmainfilepath",{"_index":120,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanager.defaultoutuptpath",{"_index":123,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanager.defaultrootpath",{"_index":117,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanageroptions",{"_index":29,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":70,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":72,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["setdefaultvalues",{"_index":200,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setdefaultvalues(jsonschema",{"_index":250,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setting",{"_index":114,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["shortfilename",{"_index":137,"title":{},"body":{"classes/SchemaManager.html":{}}}],["single",{"_index":210,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["skip",{"_index":156,"title":{},"body":{"classes/SchemaManager.html":{}}}],["software",{"_index":263,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/SchemaManager.html":{}}}],["started",{"_index":261,"title":{"index.html":{}},"body":{}}],["statements",{"_index":176,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":10,"title":{},"body":{"classes/SchemaManager.html":{}}}],["store",{"_index":239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["string",{"_index":50,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["this.main",{"_index":118,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach(__toabsolutereferencepaths",{"_index":163,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach(async",{"_index":164,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.set(filepath",{"_index":146,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.output",{"_index":121,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.read(filepath",{"_index":134,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.readandmapschemasbyabsolutepath",{"_index":168,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.root",{"_index":115,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.toabsolutereferencepaths",{"_index":169,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.write",{"_index":170,"title":{},"body":{"classes/SchemaManager.html":{}}}],["throw",{"_index":126,"title":{},"body":{"classes/SchemaManager.html":{}}}],["title",{"_index":76,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["toabsolutepaths",{"_index":204,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toabsolutepaths(map",{"_index":237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toabsolutereferencepaths",{"_index":25,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitions",{"_index":207,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["todefinitions(map",{"_index":242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["toschemamap",{"_index":209,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["toschemamap(root",{"_index":253,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tosinglefile",{"_index":211,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tosinglefile(root",{"_index":254,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transform",{"_index":84,"title":{},"body":{"classes/SchemaManager.html":{}}}],["type",{"_index":35,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":272,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":160,"title":{},"body":{"classes/SchemaManager.html":{}}}],["undefined",{"_index":247,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":71,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["unique",{"_index":81,"title":{},"body":{"classes/SchemaManager.html":{}}}],["unknown",{"_index":67,"title":{},"body":{"classes/SchemaManager.html":{}}}],["use",{"_index":110,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/typealiases.html":{}}}],["using",{"_index":245,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validateschema",{"_index":214,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validateschema(schema",{"_index":256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validating",{"_index":124,"title":{},"body":{"classes/SchemaManager.html":{}}}],["value",{"_index":40,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":74,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["values.ts",{"_index":199,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["variable",{"_index":181,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":276,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":270,"title":{},"body":{"properties.html":{}}}],["void",{"_index":89,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["write",{"_index":26,"title":{},"body":{"classes/SchemaManager.html":{}}}],["writejsonfile",{"_index":94,"title":{},"body":{"classes/SchemaManager.html":{}}}],["writejsonfile(distfilepath",{"_index":167,"title":{},"body":{"classes/SchemaManager.html":{}}}],["yes",{"_index":38,"title":{},"body":{"classes/SchemaManager.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/SchemaManager.html":{"url":"classes/SchemaManager.html","title":"class - SchemaManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/json/src/lib/util/schema-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                defaultMainFilePath\n                            \n                            \n                                    Static\n                                defaultOutuptPath\n                            \n                            \n                                    Static\n                                defaultRootPath\n                            \n                            \n                                    Protected\n                                    Readonly\n                                main\n                            \n                            \n                                    Protected\n                                    Readonly\n                                map\n                            \n                            \n                                    Protected\n                                    Readonly\n                                output\n                            \n                            \n                                    Protected\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compile\n                            \n                            \n                                    Protected\n                                    Async\n                                read\n                            \n                            \n                                    Protected\n                                    Async\n                                readAndMapSchemasByAbsolutePath\n                            \n                            \n                                    Protected\n                                toAbsoluteReferencePaths\n                            \n                            \n                                    Async\n                                write\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: SchemaManagerOptions)\n                    \n                \n                        \n                            \n                                Defined in libs/json/src/lib/util/schema-manager.ts:67\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SchemaManagerOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultMainFilePath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './main.schema.json')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:41\n                        \n                    \n\n            \n                \n                    Default mainfilepath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultOutuptPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './dist')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:46\n                        \n                    \n\n            \n                \n                    Default outuptpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultRootPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:36\n                        \n                    \n\n            \n                \n                    Default rootpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        main\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:55\n                        \n                    \n\n            \n                \n                    Entiry schema file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:67\n                        \n                    \n\n            \n                \n                    Schema map\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:60\n                        \n                    \n\n            \n                \n                    Output directory (Dist)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        root\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:51\n                        \n                    \n\n            \n                \n                    Schem project root directory\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compile\n                        \n                    \n                \n            \n            \n                \n                        \n                    compile()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:156\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                        \n                    read(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:86\n                        \n                    \n\n\n            \n                \n                        Read JSONSchema file by filepath and return the schema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        readAndMapSchemasByAbsolutePath\n                        \n                    \n                \n            \n            \n                \n                        \n                    readAndMapSchemasByAbsolutePath()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:95\n                        \n                    \n\n\n            \n                \n                        Read all descendant schemas under the root directory,\nThen set default (required values), $filepath, $dirpath, title, and definitions\nThen map them by their own absolute filename path so which will be unique for each file\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toAbsoluteReferencePaths\n                        \n                    \n                \n            \n            \n                \n                        \n                    toAbsoluteReferencePaths()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:121\n                        \n                    \n\n\n            \n                \n                        Transform all relative reference paths int he schemas into absolute paths\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        write\n                        \n                    \n                \n            \n            \n                \n                        \n                    write()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:149\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forEachJSONSchemaFile, readJSONFile, writeJSONFile } from '@rline/fs';\nimport { names } from '@rline/names';\nimport { JSONSchema, NotAbsolutePathError, PickRequired } from '@rline/type';\nimport { getLastSegment, hasKeys, isDefinitionPath } from '@rline/utils';\nimport { isAbsolute, join } from 'path';\n\nexport type SchemaManagerOptions = {\n  /**\n   * Main schema filepath\n   */\n  mainFilePath?: string;\n\n  /**\n   * Root directory of the schemas or The parent directory of the main schema file\n   */\n  rootPath?: string;\n\n  /**\n   * Output directory, by default dist\n   */\n  output?: string;\n};\n\n/**\n * The schema type that ready to use by the SchemaManager\n */\nexport type ReadyJSONSchema = PickRequired;\n\nexport class SchemaManager {\n  /**\n   * Default rootpath\n   */\n  static defaultRootPath = join(__dirname, './');\n\n  /**\n   * Default mainfilepath\n   */\n  static defaultMainFilePath = join(__dirname, './main.schema.json');\n\n  /**\n   * Default outuptpath\n   */\n  static defaultOutuptPath = join(__dirname, './dist');\n\n  /**\n   * Schem project root directory\n   */\n  protected readonly root: string;\n  /**\n   * Entiry schema file\n   */\n  protected readonly main: string;\n\n  /**\n   * Output directory (Dist)\n   */\n  protected readonly output: string;\n\n  /**\n   * Schema map\n   * @key key absolute filepath\n   * @value schema {@link ReadyJSONSchema}\n   */\n  protected readonly map = new Map();\n\n  constructor(options?: SchemaManagerOptions) {\n    // setting default values\n    this.root = options?.rootPath ?? SchemaManager.defaultRootPath;\n    this.main = options?.mainFilePath ?? SchemaManager.defaultMainFilePath;\n    this.output = options?.output ?? SchemaManager.defaultOutuptPath;\n\n    // validating\n    if (!isAbsolute(this.root)) throw new NotAbsolutePathError();\n    if (!isAbsolute(this.main)) throw new NotAbsolutePathError();\n    if (!isAbsolute(this.output)) throw new NotAbsolutePathError();\n  }\n\n  /**\n   * Read JSONSchema file by filepath and return the schema\n   * @param filepath\n   * @returns\n   */\n  protected async read(filepath: string) {\n    return await readJSONFile(filepath);\n  }\n\n  /**\n   * Read all descendant schemas under the root directory,\n   * Then set default (required values), $filepath, $dirpath, title, and definitions\n   * Then map them by their own absolute filename path so which will be unique for each file\n   */\n  protected async readAndMapSchemasByAbsolutePath() {\n    await forEachJSONSchemaFile(this.root, async (filepath: string) => {\n      // read the schema file\n      const schema = await this.read(filepath);\n\n      // Extract filename from pathF\n      const shortFilename = getLastSegment(filepath);\n\n      // Set schema title\n      schema.title = names(shortFilename).pascalCase;\n      schema.$filepath = filepath;\n      schema.$dirpath = join(filepath, '..');\n\n      if (!hasKeys(schema, ['definitions'])) schema.definitions = {};\n      if (hasKeys(schema, ['title', '$filepath', '$dirpath', 'definitions'])) {\n        this.map.set(filepath, schema);\n      } else {\n        throw new Error(`The schema is not prepared ${filepath}`);\n      }\n    });\n  }\n\n  /**\n   * Transform all relative reference paths int he schemas into absolute paths\n   * @param schema\n   */\n  protected toAbsoluteReferencePaths(): void {\n    const __toAbsoluteReferencePaths = (\n      schema: ReadyJSONSchema,\n      $filepath: string\n    ) => {\n      const pairs = Object.entries(schema);\n\n      if (pairs.length > 0) {\n        if (schema.$ref) {\n          // if reference is definition path, then skip\n          if (isDefinitionPath(schema.$ref)) return;\n          // if reference is absolute path, then skip\n          if (isAbsolute(schema.$ref)) return;\n\n          schema.$ref = join($filepath, '..', schema.$ref);\n        } else {\n          for (const [, value] of pairs) {\n            if (typeof value == 'object') {\n              __toAbsoluteReferencePaths(value, $filepath);\n            }\n          }\n        }\n      }\n    };\n\n    this.map.forEach(__toAbsoluteReferencePaths);\n  }\n\n  async write() {\n    this.map.forEach(async (value, filepath) => {\n      const distFilepath = filepath.replace(this.root, this.output);\n      await writeJSONFile(distFilepath, value);\n    });\n  }\n\n  async compile() {\n    await this.readAndMapSchemasByAbsolutePath();\n    this.toAbsoluteReferencePaths();\n    await this.write();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        libs/json/src/lib/init/init.ts\n            \n            function\n            init\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/init/init.ts\n            \n            variable\n            SCHEMA_CONFIG_FILE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/schema/schema.ts\n            \n            function\n            schema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/type/type.ts\n            \n            function\n            type\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/get-config.ts\n            \n            function\n            getConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/me.ts\n            \n            function\n            me\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/read-json-schema-file.ts\n            \n            function\n            readJSONSchemaFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/json/src/lib/util/schema-manager.ts\n            \n            class\n            SchemaManager\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/schema-manager.ts\n            \n            type alias\n            ReadyJSONSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/schema-manager.ts\n            \n            type alias\n            SchemaManagerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/set-default-values.ts\n            \n            function\n            setDefaultValues\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-absolute-paths.ts\n            \n            function\n            __toAbsolutePaths\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-absolute-paths.ts\n            \n            function\n            toAbsolutePaths\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-definitions.ts\n            \n            function\n            __toDefinition\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-definitions.ts\n            \n            function\n            toDefinitions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-schema-map.ts\n            \n            function\n            toSchemaMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/to-single-file.ts\n            \n            function\n            toSingleFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/validate-schema.ts\n            \n            function\n            validateSchema\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nx/devkit : 20.3.2\n        \n            commander : ^13.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            __toAbsolutePaths   (libs/.../to-absolute-paths.ts)\n                        \n                        \n                            __toDefinition   (libs/.../to-definitions.ts)\n                        \n                        \n                            getConfig   (libs/.../get-config.ts)\n                        \n                        \n                            init   (libs/.../init.ts)\n                        \n                        \n                            me   (libs/.../me.ts)\n                        \n                        \n                            readJSONSchemaFile   (libs/.../read-json-schema-file.ts)\n                        \n                        \n                            schema   (libs/.../schema.ts)\n                        \n                        \n                            setDefaultValues   (libs/.../set-default-values.ts)\n                        \n                        \n                            toAbsolutePaths   (libs/.../to-absolute-paths.ts)\n                        \n                        \n                            toDefinitions   (libs/.../to-definitions.ts)\n                        \n                        \n                            toSchemaMap   (libs/.../to-schema-map.ts)\n                        \n                        \n                            toSingleFile   (libs/.../to-single-file.ts)\n                        \n                        \n                            type   (libs/.../type.ts)\n                        \n                        \n                            validateSchema   (libs/.../validate-schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/lib/util/to-absolute-paths.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        __toAbsolutePaths\n                        \n                    \n                \n            \n            \n                \n__toAbsolutePaths(root: string, schema: JSONSchema)\n                \n            \n\n\n\n\n            \n                \n                        Convert relative $ref values into absolute paths\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                schema\n                                            \n                                                        JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toAbsolutePaths\n                        \n                    \n                \n            \n            \n                \ntoAbsolutePaths(map: Map)\n                \n            \n\n\n\n\n            \n                \n                        Convert relative $ref values into absolute paths\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                map\n                                            \n                                                        Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/util/to-definitions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        __toDefinition\n                        \n                    \n                \n            \n            \n                \n__toDefinition(jsonSchema: JSONSchema)\n                \n            \n\n\n\n\n            \n                \n                        Read the $ref path and store the content as definition in the schema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jsonSchema\n                                            \n                                                        JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toDefinitions\n                        \n                    \n                \n            \n            \n                \ntoDefinitions(map: Map)\n                \n            \n\n\n\n\n            \n                \n                        Read reference content, create definition, and store the definition into main schema definitions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                map\n                                            \n                                                        Map\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/util/get-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n            \n                \ngetConfig()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    libs/json/src/lib/init/init.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n\n\n        \n    \n    libs/json/src/lib/util/me.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        me\n                        \n                    \n                \n            \n            \n                \nme()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    libs/json/src/lib/util/read-json-schema-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        readJSONSchemaFile\n                        \n                    \n                \n            \n            \n                \nreadJSONSchemaFile(filepath: string)\n                \n            \n\n\n\n\n            \n                \n                        Read the json schema file, if it does not have a title, set title using names library\nif definitions are undefined, set it empty object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/schema/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n            \n                \nschema()\n                \n            \n\n\n\n\n            \n                \n                        JSON schema compiler\n\n\n                \n            \n        \n    \n    libs/json/src/lib/util/set-default-values.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setDefaultValues\n                        \n                    \n                \n            \n            \n                \nsetDefaultValues(jsonSchema: JSONSchema)\n                \n            \n\n\n\n\n            \n                \n                        prepare the json schema object for operations by setting default values\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jsonSchema\n                                            \n                                                        JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/util/to-schema-map.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toSchemaMap\n                        \n                    \n                \n            \n            \n                \ntoSchemaMap(root: string)\n                \n            \n\n\n\n\n            \n                \n                        map each schema under the root directory\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/util/to-single-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toSingleFile\n                        \n                    \n                \n            \n            \n                \ntoSingleFile(root: string, mainFileName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                        \n                                                mainFileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/type/type.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype()\n                \n            \n\n\n\n\n        \n    \n    libs/json/src/lib/util/validate-schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        validateSchema\n                        \n                    \n                \n            \n            \n                \nvalidateSchema(schema: JSONSchema)\n                \n            \n\n\n\n\n            \n                \n                        Validate the schema and initialize required properties\nfor referenced schemas, the title is required to create definition key\nfor all schemas, type is required\ndefinitions are an empty object by default\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                        JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Required\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBrighline Software Comon Packages\nCommon packages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 8.1.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadyJSONSchema   (libs/.../schema-manager.ts)\n                        \n                        \n                            SchemaManagerOptions   (libs/.../schema-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/lib/util/schema-manager.ts\n    \n    \n        \n            \n                \n                    \n                    ReadyJSONSchema\n                \n            \n            \n                \n                    The schema type that ready to use by the SchemaManager\n\n                \n            \n            \n                \n                            PickRequired\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaManagerOptions\n                \n            \n            \n                \n                            literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SCHEMA_CONFIG_FILE_NAME   (libs/.../init.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/lib/init/init.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SCHEMA_CONFIG_FILE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'schema.config.json'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
