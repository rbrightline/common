var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/SchemaManager.html",[0,0.987,1,0.987]],["body/classes/SchemaManager.html",[0,0.236,1,0.421,2,0.525,3,0.525,4,0.525,5,1.387,6,1.438,7,0.302,8,0.183,9,0.539,10,2.413,11,1.271,12,1.271,13,1.271,14,3.689,15,2.719,16,1.971,17,2.413,18,2.139,19,1.387,20,0.938,21,2.801,22,1.545,23,1.545,24,1.545,25,2.139,26,1.545,27,2.285,28,1.545,29,1.545,30,0.938,31,1.545,32,1.545,33,0.525,34,0.938,35,0.693,36,3.247,37,0.938,38,1.149,39,0.099,40,1.149,41,1.083,42,1.149,43,0.391,44,0.525,45,2.234,46,1.954,47,1.971,48,0.938,49,0.525,50,0.938,51,1.775,52,0.525,53,0.938,54,0.525,55,0.938,56,2.351,57,0.525,58,0.938,59,1.143,60,2.083,61,0.525,62,2.413,63,0.525,64,0.938,65,0.938,66,0.525,67,2.022,68,0.525,69,1.025,70,0.938,71,0.525,72,2.413,73,1.271,74,0.938,75,0.938,76,0.938,77,0.698,78,1.775,79,1.02,80,1.32,81,0.938,82,0.525,83,1.971,84,3.004,85,2.527,86,0.525,87,0.525,88,0.938,89,1.775,90,0.938,91,0.938,92,1.775,93,1.775,94,2.285,95,0.938,96,1.775,97,0.938,98,0.938,99,0.525,100,0.525,101,1.271,102,0.938,103,1.545,104,1.971,105,0.938,106,0.525,107,0.938,108,1.149,109,0.938,110,0.525,111,0.525,112,0.945,113,1.971,114,0.525,115,2.139,116,0.938,117,0.525,118,0.525,119,0.525,120,0.525,121,0.525,122,1.545,123,0.938,124,1.545,125,1.775,126,0.525,127,0.525,128,0.525,129,0.525,130,0.525,131,0.525,132,0.525,133,0.525,134,0.525,135,0.302,136,0.938,137,0.525,138,0.525,139,0.525,140,0.938,141,0.525,142,0.525,143,0.525,144,0.525,145,0.525,146,0.938,147,0.525,148,0.525,149,0.525,150,0.525,151,2.628,152,0.525,153,0.525,154,0.938,155,1.971,156,0.525,157,0.525,158,0.525,159,2.942,160,0.525,161,0.938,162,0.525,163,0.525,164,0.525,165,0.525,166,0.525,167,0.525,168,0.525,169,0.525,170,0.525,171,0.938,172,0.525,173,0.525,174,0.698,175,1.271,176,0.938,177,0.938,178,0.525,179,0.525,180,0.525,181,0.525,182,0.525,183,0.938,184,0.525,185,0.525,186,0.938,187,1.271,188,0.525,189,0.525,190,0.525,191,2.139,192,0.525,193,0.938,194,0.525,195,2.139,196,0.525,197,0.525,198,0.525,199,0.525,200,0.525,201,0.938,202,0.938,203,0.938,204,0.938,205,0.938,206,0.525,207,0.938,208,0.525,209,1.545,210,0.525,211,0.525,212,0.525,213,0.525,214,0.525,215,0.938,216,0.525,217,0.525,218,1.545,219,0.525,220,0.525,221,0.525,222,0.525,223,0.525,224,0.525,225,0.525,226,0.525,227,0.525,228,0.525,229,0.525,230,0.525,231,0.525,232,0.525,233,0.525,234,0.525,235,0.525,236,0.022,237,0.022]],["title/coverage.html",[238,2.179]],["body/coverage.html",[0,1.065,1,1.065,5,1.365,6,1.534,7,1.77,35,1.065,39,0.095,41,1.534,59,0.826,60,1.765,69,1.065,77,2.788,79,1.365,135,1.365,174,2.542,236,0.072,237,0.072,238,1.765,239,2.374,240,2.374,241,2.374,242,1.765,243,1.765,244,3.749,245,3.749,246,1.765,247,1.765,248,1.765,249,3.419,250,1.765,251,1.765,252,1.765,253,1.765,254,3.08,255,1.765,256,1.765,257,2.374,258,2.374,259,1.765,260,1.765,261,2.374,262,1.765,263,2.374,264,2.374]],["title/dependencies.html",[265,1.394,266,1.953]],["body/dependencies.html",[39,0.093,236,0.086,237,0.086,266,2.343,267,3.151,268,3.151,269,3.151,270,3.151]],["title/miscellaneous/functions.html",[271,0.495,272,1.953]],["body/miscellaneous/functions.html",[5,1.268,6,0.99,8,0.768,19,1.896,35,1.317,38,2.615,39,0.091,40,2.615,41,1.577,42,2.615,43,1.641,56,2.799,59,1.274,67,2.183,69,1.317,79,1.896,80,1.641,108,1.641,135,1.687,236,0.069,237,0.069,242,1.641,243,2.183,246,1.641,247,1.641,248,2.453,250,1.641,251,2.183,255,2.183,256,2.183,271,0.583,272,1.641,273,2.207,274,2.207,275,2.207,276,1.641,277,2.207,278,2.207,279,2.936,280,2.936,281,2.207,282,2.207,283,2.207,284,2.936,285,2.207,286,2.207,287,2.207,288,2.207,289,2.207,290,2.207,291,2.207]],["title/index.html",[8,0.652,292,1.874,293,1.874]],["body/index.html",[39,0.086,236,0.086,237,0.086,294,3.167,295,3.167,296,3.167,297,3.677,298,3.167]],["title/modules.html",[299,2.179]],["body/modules.html",[39,0.087,236,0.087,237,0.087,299,2.416]],["title/overview.html",[300,2.179]],["body/overview.html",[0,1.443,39,0.087,236,0.087,237,0.087,300,2.391,301,3.216]],["title/properties.html",[9,1.509,265,1.394]],["body/properties.html",[9,1.839,39,0.091,236,0.086,237,0.086,302,3.199,303,3.199]],["title/miscellaneous/typealiases.html",[271,0.495,304,2.626]],["body/miscellaneous/typealiases.html",[1,1.302,6,1.302,7,2.007,8,1.01,35,1.567,39,0.082,41,1.681,59,1.01,69,1.567,112,2.158,236,0.082,237,0.082,252,2.158,253,2.597,271,0.766,276,2.158,305,2.903,306,2.903,307,2.903,308,2.903,309,2.903]],["title/miscellaneous/variables.html",[271,0.495,310,1.953]],["body/miscellaneous/variables.html",[8,1.049,19,1.733,39,0.089,45,2.242,46,2.242,59,1.049,236,0.083,237,0.083,259,2.242,260,2.656,262,2.656,271,0.796,310,2.242,311,3.015,312,3.015,313,3.015]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":174,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["0/1",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":301,"title":{},"body":{"overview.html":{}}}],["1/1",{"_index":245,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["13.1.0",{"_index":270,"title":{},"body":{"dependencies.html":{}}}],["13/20",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["20.3.2",{"_index":268,"title":{},"body":{"dependencies.html":{}}}],["65",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["8.1.1",{"_index":303,"title":{},"body":{"properties.html":{}}}],["__refschema",{"_index":205,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__refschema.$ref",{"_index":219,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__toabsolutereferencepaths",{"_index":170,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__toabsolutereferencepaths(value",{"_index":183,"title":{},"body":{"classes/SchemaManager.html":{}}}],["absolute",{"_index":94,"title":{},"body":{"classes/SchemaManager.html":{}}}],["alias",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":305,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["async",{"_index":21,"title":{},"body":{"classes/SchemaManager.html":{}}}],["await",{"_index":155,"title":{},"body":{"classes/SchemaManager.html":{}}}],["brighline",{"_index":294,"title":{},"body":{"index.html":{}}}],["callback",{"_index":279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["class",{"_index":0,"title":{"classes/SchemaManager.html":{}},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/SchemaManager.html":{}}}],["clone",{"_index":127,"title":{},"body":{"classes/SchemaManager.html":{}}}],["clone(schema",{"_index":194,"title":{},"body":{"classes/SchemaManager.html":{}}}],["commander",{"_index":269,"title":{},"body":{"dependencies.html":{}}}],["common",{"_index":298,"title":{},"body":{"index.html":{}}}],["comon",{"_index":296,"title":{},"body":{"index.html":{}}}],["compile",{"_index":22,"title":{},"body":{"classes/SchemaManager.html":{}}}],["compiler",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.ts",{"_index":255,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["console.log",{"_index":218,"title":{},"body":{"classes/SchemaManager.html":{}}}],["console.log(this.map",{"_index":232,"title":{},"body":{"classes/SchemaManager.html":{}}}],["console.log(this.map.keys",{"_index":220,"title":{},"body":{"classes/SchemaManager.html":{}}}],["const",{"_index":159,"title":{},"body":{"classes/SchemaManager.html":{}}}],["constructor",{"_index":33,"title":{},"body":{"classes/SchemaManager.html":{}}}],["constructor(options",{"_index":34,"title":{},"body":{"classes/SchemaManager.html":{}}}],["convert",{"_index":107,"title":{},"body":{"classes/SchemaManager.html":{}}}],["coverage",{"_index":238,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createpathscope(join(__dirname",{"_index":312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cschema",{"_index":193,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$dirpath",{"_index":198,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$filepath",{"_index":199,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$schema",{"_index":197,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.definitions",{"_index":200,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.title",{"_index":196,"title":{},"body":{"classes/SchemaManager.html":{}}}],["data",{"_index":313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":45,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/variables.html":{}}}],["defaultmainfilepath",{"_index":11,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultoutuptpath",{"_index":12,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultrootpath",{"_index":13,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/SchemaManager.html":{}}}],["definition",{"_index":176,"title":{},"body":{"classes/SchemaManager.html":{}}}],["definitions",{"_index":72,"title":{},"body":{"classes/SchemaManager.html":{}}}],["definitions/${refschema.title",{"_index":225,"title":{},"body":{"classes/SchemaManager.html":{}}}],["delete",{"_index":195,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dependencies",{"_index":266,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descendant",{"_index":88,"title":{},"body":{"classes/SchemaManager.html":{}}}],["directory",{"_index":62,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dirpath",{"_index":93,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dist",{"_index":51,"title":{},"body":{"classes/SchemaManager.html":{}}}],["documentation",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["e",{"_index":202,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.$dirpath",{"_index":190,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.$filepath",{"_index":189,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.definitions",{"_index":187,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.title",{"_index":188,"title":{},"body":{"classes/SchemaManager.html":{}}}],["each",{"_index":79,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["entiry",{"_index":58,"title":{},"body":{"classes/SchemaManager.html":{}}}],["entries",{"_index":128,"title":{},"body":{"classes/SchemaManager.html":{}}}],["entries(refschema.definitions",{"_index":216,"title":{},"body":{"classes/SchemaManager.html":{}}}],["export",{"_index":136,"title":{},"body":{"classes/SchemaManager.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":95,"title":{},"body":{"classes/SchemaManager.html":{}}}],["filepath",{"_index":84,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachjsonschemafile",{"_index":116,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachkeycallback",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["foreachref",{"_index":135,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["foreachref(e",{"_index":204,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachref(schema",{"_index":278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":77,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["functions",{"_index":272,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getlastsegment",{"_index":129,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getrootschema",{"_index":23,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getting",{"_index":292,"title":{"index.html":{}},"body":{}}],["go",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["haskeys",{"_index":130,"title":{},"body":{"classes/SchemaManager.html":{}}}],["haskeys(schema",{"_index":166,"title":{},"body":{"classes/SchemaManager.html":{}}}],["identifier",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":115,"title":{},"body":{"classes/SchemaManager.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/SchemaManager.html":{}}}],["init",{"_index":243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["init(root",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["initializeeachdiefintionsifundefined",{"_index":24,"title":{},"body":{"classes/SchemaManager.html":{}}}],["int",{"_index":105,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute",{"_index":133,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(schema.$ref",{"_index":179,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.main",{"_index":152,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.output",{"_index":153,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.root",{"_index":150,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath",{"_index":131,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(__refschema.$ref",{"_index":206,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(referenceschema.$ref",{"_index":222,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(schema.$ref",{"_index":178,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join",{"_index":134,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join($filepath",{"_index":180,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(__dirname",{"_index":47,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(schema.$filepath",{"_index":165,"title":{},"body":{"classes/SchemaManager.html":{}}}],["json",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jsonschema",{"_index":83,"title":{},"body":{"classes/SchemaManager.html":{}}}],["key",{"_index":113,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keynotfounderror",{"_index":122,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keys",{"_index":73,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keys(refschema.definitions).length",{"_index":214,"title":{},"body":{"classes/SchemaManager.html":{}}}],["libs/.../__test",{"_index":311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../for",{"_index":273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../init.ts",{"_index":274,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../ready",{"_index":306,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../schema",{"_index":276,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/.../schema.ts",{"_index":275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../tsc.ts",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/json/src/lib/init/init.ts",{"_index":242,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/schema/schema.ts",{"_index":246,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/tsc/tsc.ts",{"_index":247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/for",{"_index":250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/json/src/lib/util/ready",{"_index":252,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["libs/json/src/lib/util/schema",{"_index":6,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["libs/json/src/test/__test",{"_index":259,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":138,"title":{},"body":{"classes/SchemaManager.html":{}}}],["literal",{"_index":309,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["main",{"_index":16,"title":{},"body":{"classes/SchemaManager.html":{}}}],["main.schema.json",{"_index":48,"title":{},"body":{"classes/SchemaManager.html":{}}}],["mainfilepath",{"_index":50,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts",{"_index":7,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["manager.ts:107",{"_index":87,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:141",{"_index":100,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:174",{"_index":71,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:183",{"_index":111,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:192",{"_index":68,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:198",{"_index":110,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:211",{"_index":106,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:259",{"_index":114,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:267",{"_index":66,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:43",{"_index":54,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:48",{"_index":49,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:53",{"_index":52,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:58",{"_index":63,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:62",{"_index":57,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:67",{"_index":61,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:74",{"_index":37,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:93",{"_index":82,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:97",{"_index":99,"title":{},"body":{"classes/SchemaManager.html":{}}}],["map",{"_index":17,"title":{},"body":{"classes/SchemaManager.html":{}}}],["matching",{"_index":237,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/SchemaManager.html":{}}}],["miscellaneous",{"_index":271,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missingpropertyerror",{"_index":123,"title":{},"body":{"classes/SchemaManager.html":{}}}],["modules",{"_index":299,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":120,"title":{},"body":{"classes/SchemaManager.html":{}}}],["names(getlastsegment(filepath).replace('.schema.json",{"_index":157,"title":{},"body":{"classes/SchemaManager.html":{}}}],["never",{"_index":70,"title":{},"body":{"classes/SchemaManager.html":{}}}],["new",{"_index":60,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["notabsolutepatherror",{"_index":124,"title":{},"body":{"classes/SchemaManager.html":{}}}],["nx/devkit",{"_index":267,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":182,"title":{},"body":{"classes/SchemaManager.html":{}}}],["object.entries(schema",{"_index":172,"title":{},"body":{"classes/SchemaManager.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":43,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["options?.main",{"_index":144,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.output",{"_index":147,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.root",{"_index":141,"title":{},"body":{"classes/SchemaManager.html":{}}}],["output",{"_index":18,"title":{},"body":{"classes/SchemaManager.html":{}}}],["outuptpath",{"_index":53,"title":{},"body":{"classes/SchemaManager.html":{}}}],["overview",{"_index":300,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":265,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":297,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":171,"title":{},"body":{"classes/SchemaManager.html":{}}}],["pairs.length",{"_index":173,"title":{},"body":{"classes/SchemaManager.html":{}}}],["param",{"_index":154,"title":{},"body":{"classes/SchemaManager.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":137,"title":{},"body":{"classes/SchemaManager.html":{}}}],["pascalcase",{"_index":158,"title":{},"body":{"classes/SchemaManager.html":{}}}],["path",{"_index":96,"title":{},"body":{"classes/SchemaManager.html":{}}}],["paths",{"_index":104,"title":{},"body":{"classes/SchemaManager.html":{}}}],["pickrequired",{"_index":308,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["project",{"_index":65,"title":{},"body":{"classes/SchemaManager.html":{}}}],["promise",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/SchemaManager.html":{},"properties.html":{}}}],["protected",{"_index":14,"title":{},"body":{"classes/SchemaManager.html":{}}}],["read",{"_index":25,"title":{},"body":{"classes/SchemaManager.html":{}}}],["read(filepath",{"_index":81,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readandmapschemasbyabsolutepath",{"_index":26,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile",{"_index":117,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile(filepath",{"_index":156,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"classes/SchemaManager.html":{}}}],["ready",{"_index":112,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/typealiases.html":{}}}],["readyjsonschema",{"_index":69,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["recursive",{"_index":168,"title":{},"body":{"classes/SchemaManager.html":{}}}],["ref",{"_index":108,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["ref.ts",{"_index":251,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refdefinitions",{"_index":215,"title":{},"body":{"classes/SchemaManager.html":{}}}],["reference",{"_index":103,"title":{},"body":{"classes/SchemaManager.html":{}}}],["references",{"_index":76,"title":{},"body":{"classes/SchemaManager.html":{}}}],["referenceschema",{"_index":221,"title":{},"body":{"classes/SchemaManager.html":{}}}],["referenceschema.$ref",{"_index":224,"title":{},"body":{"classes/SchemaManager.html":{}}}],["refschema",{"_index":209,"title":{},"body":{"classes/SchemaManager.html":{}}}],["refschema.title",{"_index":211,"title":{},"body":{"classes/SchemaManager.html":{}}}],["reftitle",{"_index":207,"title":{},"body":{"classes/SchemaManager.html":{}}}],["relative",{"_index":102,"title":{},"body":{"classes/SchemaManager.html":{}}}],["required",{"_index":91,"title":{},"body":{"classes/SchemaManager.html":{}}}],["requirederror",{"_index":125,"title":{},"body":{"classes/SchemaManager.html":{}}}],["results",{"_index":236,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":85,"title":{},"body":{"classes/SchemaManager.html":{}}}],["returns",{"_index":67,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["rline/fs",{"_index":119,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/names",{"_index":121,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/type",{"_index":126,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rline/utils",{"_index":132,"title":{},"body":{"classes/SchemaManager.html":{}}}],["root",{"_index":19,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["rootpath",{"_index":55,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema",{"_index":191,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.$dirpath",{"_index":226,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.$filepath",{"_index":227,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.definitions[key",{"_index":217,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.definitions[refschema.title",{"_index":212,"title":{},"body":{"classes/SchemaManager.html":{}}}],["safepath",{"_index":262,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["schem",{"_index":64,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema",{"_index":59,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["schema(options",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schema.$dirpath",{"_index":164,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$filepath",{"_index":163,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$ref",{"_index":175,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.title",{"_index":161,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.ts",{"_index":253,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["schemaconfig",{"_index":256,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["schemaconfig(root",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schemamanager",{"_index":1,"title":{"classes/SchemaManager.html":{}},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["schemamanager.defaultmainfilepath",{"_index":145,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanager.defaultoutuptpath",{"_index":148,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanager.defaultrootpath",{"_index":142,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanageroptions",{"_index":35,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":89,"title":{},"body":{"classes/SchemaManager.html":{}}}],["set",{"_index":78,"title":{},"body":{"classes/SchemaManager.html":{}}}],["setting",{"_index":139,"title":{},"body":{"classes/SchemaManager.html":{}}}],["skip",{"_index":177,"title":{},"body":{"classes/SchemaManager.html":{}}}],["software",{"_index":295,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/SchemaManager.html":{}}}],["started",{"_index":293,"title":{"index.html":{}},"body":{}}],["statements",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":10,"title":{},"body":{"classes/SchemaManager.html":{}}}],["store",{"_index":75,"title":{},"body":{"classes/SchemaManager.html":{}}}],["string",{"_index":56,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["table",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":263,"title":{},"body":{"coverage.html":{}}}],["templatefiledir",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.getrootschema",{"_index":201,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.initializeeachdiefintionsifundefined",{"_index":231,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.main",{"_index":143,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach((e",{"_index":186,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach((value",{"_index":184,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(reftitle",{"_index":210,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(this.title(referenceschema.$ref",{"_index":223,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(this.title(this.main",{"_index":192,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.set(schema.title",{"_index":167,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.values",{"_index":203,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.output",{"_index":146,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.read(filepath",{"_index":160,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.readandmapschemasbyabsolutepath",{"_index":229,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.root",{"_index":140,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.title(__refschema.$ref",{"_index":208,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.title(filepath",{"_index":162,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.toabsolutereferencepaths",{"_index":230,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.todefinitions",{"_index":233,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.todefinitionschema(refschema",{"_index":213,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.validateschemas",{"_index":234,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.write",{"_index":235,"title":{},"body":{"classes/SchemaManager.html":{}}}],["through",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["throw",{"_index":151,"title":{},"body":{"classes/SchemaManager.html":{}}}],["title",{"_index":27,"title":{},"body":{"classes/SchemaManager.html":{}}}],["title(filepath",{"_index":98,"title":{},"body":{"classes/SchemaManager.html":{}}}],["toabsolutereferencepaths",{"_index":28,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitions",{"_index":29,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitionschema",{"_index":30,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitionschema(schema",{"_index":109,"title":{},"body":{"classes/SchemaManager.html":{}}}],["transform",{"_index":101,"title":{},"body":{"classes/SchemaManager.html":{}}}],["true",{"_index":169,"title":{},"body":{"classes/SchemaManager.html":{}}}],["tsc",{"_index":248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":304,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":181,"title":{},"body":{"classes/SchemaManager.html":{}}}],["under",{"_index":90,"title":{},"body":{"classes/SchemaManager.html":{}}}],["unique",{"_index":97,"title":{},"body":{"classes/SchemaManager.html":{}}}],["unknown",{"_index":86,"title":{},"body":{"classes/SchemaManager.html":{}}}],["use",{"_index":307,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["used",{"_index":74,"title":{},"body":{"classes/SchemaManager.html":{}}}],["utils.ts",{"_index":260,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validateschemas",{"_index":31,"title":{},"body":{"classes/SchemaManager.html":{}}}],["validating",{"_index":149,"title":{},"body":{"classes/SchemaManager.html":{}}}],["value",{"_index":46,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/variables.html":{}}}],["value.$filepath",{"_index":185,"title":{},"body":{"classes/SchemaManager.html":{}}}],["values",{"_index":92,"title":{},"body":{"classes/SchemaManager.html":{}}}],["variable",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":310,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":302,"title":{},"body":{"properties.html":{}}}],["void",{"_index":80,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["write",{"_index":32,"title":{},"body":{"classes/SchemaManager.html":{}}}],["writejsonfile",{"_index":118,"title":{},"body":{"classes/SchemaManager.html":{}}}],["writejsonfile(this.main.replace(this.root",{"_index":228,"title":{},"body":{"classes/SchemaManager.html":{}}}],["yes",{"_index":44,"title":{},"body":{"classes/SchemaManager.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/SchemaManager.html":{"url":"classes/SchemaManager.html","title":"class - SchemaManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/json/src/lib/util/schema-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                defaultMainFilePath\n                            \n                            \n                                    Static\n                                defaultOutuptPath\n                            \n                            \n                                    Static\n                                defaultRootPath\n                            \n                            \n                                    Protected\n                                    Readonly\n                                main\n                            \n                            \n                                    Protected\n                                    Readonly\n                                map\n                            \n                            \n                                    Protected\n                                    Readonly\n                                output\n                            \n                            \n                                    Protected\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                compile\n                            \n                            \n                                    Protected\n                                getRootSchema\n                            \n                            \n                                    Protected\n                                initializeEachDiefintionsIfUndefined\n                            \n                            \n                                    Protected\n                                    Async\n                                read\n                            \n                            \n                                    Protected\n                                    Async\n                                readAndMapSchemasByAbsolutePath\n                            \n                            \n                                    Protected\n                                title\n                            \n                            \n                                    Protected\n                                toAbsoluteReferencePaths\n                            \n                            \n                                    Protected\n                                toDefinitions\n                            \n                            \n                                    Protected\n                                toDefinitionSchema\n                            \n                            \n                                    Protected\n                                validateSchemas\n                            \n                            \n                                    Async\n                                write\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: SchemaManagerOptions)\n                    \n                \n                        \n                            \n                                Defined in libs/json/src/lib/util/schema-manager.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SchemaManagerOptions\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultMainFilePath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './main.schema.json')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:48\n                        \n                    \n\n            \n                \n                    Default mainfilepath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultOutuptPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './dist')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:53\n                        \n                    \n\n            \n                \n                    Default outuptpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultRootPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './')\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:43\n                        \n                    \n\n            \n                \n                    Default rootpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        main\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:62\n                        \n                    \n\n            \n                \n                    Entiry schema file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:74\n                        \n                    \n\n            \n                \n                    Schema map\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:67\n                        \n                    \n\n            \n                \n                    Output directory (Dist)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        root\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/json/src/lib/util/schema-manager.ts:58\n                        \n                    \n\n            \n                \n                    Schem project root directory\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compile\n                        \n                    \n                \n            \n            \n                \n                        \n                    compile()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:267\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getRootSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRootSchema()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:192\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ReadyJSONSchema | never\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        initializeEachDiefintionsIfUndefined\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeEachDiefintionsIfUndefined()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:174\n                        \n                    \n\n\n            \n                \n                        Definitions keys is used to store references. So, this function set default value ({}) for each schema\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                        \n                    read(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:93\n                        \n                    \n\n\n            \n                \n                        Read JSONSchema file by filepath and return the schema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        readAndMapSchemasByAbsolutePath\n                        \n                    \n                \n            \n            \n                \n                        \n                    readAndMapSchemasByAbsolutePath()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:107\n                        \n                    \n\n\n            \n                \n                        Read all descendant schemas under the root directory,\nThen set default (required values), $filepath, $dirpath, title, and definitions\nThen map them by their own absolute filename path so which will be unique for each file\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        title\n                        \n                    \n                \n            \n            \n                \n                        \n                    title(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toAbsoluteReferencePaths\n                        \n                    \n                \n            \n            \n                \n                        \n                    toAbsoluteReferencePaths()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:141\n                        \n                    \n\n\n            \n                \n                        Transform all relative reference paths int he schemas into absolute paths\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toDefinitions\n                        \n                    \n                \n            \n            \n                \n                        \n                    toDefinitions()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:211\n                        \n                    \n\n\n            \n                \n                        Convert absolute $ref values into definitions\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toDefinitionSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    toDefinitionSchema(schema: ReadyJSONSchema)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ReadyJSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     JSONSchema\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        validateSchemas\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateSchemas()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:183\n                        \n                    \n\n\n            \n                \n                        The ready-schema must have title, $filepath, $dirpath, and definitions key defined.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        write\n                        \n                    \n                \n            \n            \n                \n                        \n                    write()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/json/src/lib/util/schema-manager.ts:259\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forEachJSONSchemaFile, readJSONFile, writeJSONFile } from '@rline/fs';\nimport { names } from '@rline/names';\nimport {\n  JSONSchema,\n  KeyNotFoundError,\n  MissingPropertyError,\n  NotAbsolutePathError,\n  RequiredError,\n} from '@rline/type';\nimport {\n  clone,\n  entries,\n  getLastSegment,\n  hasKeys,\n  isDefinitionPath,\n  keys,\n} from '@rline/utils';\nimport { isAbsolute, join } from 'path';\nimport { forEachRef } from './for-each-ref';\nimport { ReadyJSONSchema } from './ready-schema';\n\nexport type SchemaManagerOptions = {\n  /**\n   * Main schema filepath\n   */\n  main: string;\n\n  /**\n   * Root directory of the schemas or The parent directory of the main schema file\n   */\n  root: string;\n\n  /**\n   * Output directory, by default dist\n   */\n  output: string;\n};\n\nexport class SchemaManager {\n  /**\n   * Default rootpath\n   */\n  static defaultRootPath = join(__dirname, './');\n\n  /**\n   * Default mainfilepath\n   */\n  static defaultMainFilePath = join(__dirname, './main.schema.json');\n\n  /**\n   * Default outuptpath\n   */\n  static defaultOutuptPath = join(__dirname, './dist');\n\n  /**\n   * Schem project root directory\n   */\n  protected readonly root: string;\n  /**\n   * Entiry schema file\n   */\n  protected readonly main: string;\n\n  /**\n   * Output directory (Dist)\n   */\n  protected readonly output: string;\n\n  /**\n   * Schema map\n   * @key key absolute filepath\n   * @value schema {@link ReadyJSONSchema}\n   */\n  protected readonly map = new Map();\n\n  constructor(options?: SchemaManagerOptions) {\n    // setting default values\n    this.root = options?.root ?? SchemaManager.defaultRootPath;\n    this.main = options?.main ?? SchemaManager.defaultMainFilePath;\n    this.output = options?.output ?? SchemaManager.defaultOutuptPath;\n\n    // validating\n    if (!isAbsolute(this.root)) throw new NotAbsolutePathError();\n    if (!isAbsolute(this.main)) throw new NotAbsolutePathError();\n    if (!isAbsolute(this.output)) throw new NotAbsolutePathError();\n  }\n\n  /**\n   * Read JSONSchema file by filepath and return the schema\n   * @param filepath\n   * @returns\n   */\n  protected async read(filepath: string) {\n    return await readJSONFile(filepath);\n  }\n\n  protected title(filepath: string): string {\n    return names(getLastSegment(filepath).replace('.schema.json', ''))\n      .pascalCase;\n  }\n\n  /**\n   * Read all descendant schemas under the root directory,\n   * Then set default (required values), $filepath, $dirpath, title, and definitions\n   * Then map them by their own absolute filename path so which will be unique for each file\n   */\n  protected async readAndMapSchemasByAbsolutePath() {\n    await forEachJSONSchemaFile(\n      this.root,\n      async (filepath: string) => {\n        // read the schema file\n        const schema = await this.read(filepath);\n\n        // Set schema title\n        schema.title = this.title(filepath);\n        schema.$filepath = filepath;\n        schema.$dirpath = join(schema.$filepath, '..');\n\n        if (\n          hasKeys(schema, [\n            'type',\n            'title',\n            '$filepath',\n            '$dirpath',\n            'definitions',\n          ])\n        ) {\n          this.map.set(schema.title, schema);\n        } else {\n          throw new MissingPropertyError();\n        }\n      },\n      { recursive: true }\n    );\n  }\n\n  /**\n   * Transform all relative reference paths int he schemas into absolute paths\n   * @param schema\n   */\n  protected toAbsoluteReferencePaths(): void {\n    const __toAbsoluteReferencePaths = (\n      schema: ReadyJSONSchema,\n      $filepath: string\n    ) => {\n      const pairs = Object.entries(schema);\n\n      if (pairs.length > 0) {\n        if (schema.$ref) {\n          // if reference is definition path, then skip\n          if (isDefinitionPath(schema.$ref)) return;\n          // if reference is absolute path, then skip\n          if (isAbsolute(schema.$ref)) return;\n\n          schema.$ref = join($filepath, '..', schema.$ref);\n        } else {\n          for (const [, value] of pairs) {\n            if (typeof value == 'object') {\n              __toAbsoluteReferencePaths(value, $filepath);\n            }\n          }\n        }\n      }\n    };\n\n    this.map.forEach((value, key) => {\n      __toAbsoluteReferencePaths(value, value.$filepath);\n    });\n  }\n\n  /**\n   * Definitions keys is used to store references. So, this function set default value ({}) for each schema\n   **/\n  protected initializeEachDiefintionsIfUndefined() {\n    this.map.forEach((e) => {\n      if (!e.definitions) e.definitions = {};\n    });\n  }\n\n  /**\n   * The ready-schema must have title, $filepath, $dirpath, and definitions key defined.\n   */\n  protected validateSchemas() {\n    this.map.forEach((e) => {\n      if (!e.title) throw new RequiredError();\n      if (!e.$filepath) throw new RequiredError();\n      if (!e.$dirpath) throw new RequiredError();\n      if (!e.definitions) throw new RequiredError();\n    });\n  }\n\n  protected getRootSchema(): ReadyJSONSchema | never {\n    const rootSchema = this.map.get(this.title(this.main));\n    if (!rootSchema) throw new KeyNotFoundError();\n    return rootSchema;\n  }\n\n  protected toDefinitionSchema(schema: ReadyJSONSchema): JSONSchema {\n    const cSchema = clone(schema);\n    delete cSchema.title;\n    delete cSchema.$schema;\n    delete cSchema.$dirpath;\n    delete cSchema.$filepath;\n    delete cSchema.definitions;\n    return cSchema;\n  }\n\n  /**\n   * Convert absolute $ref values into definitions\n   */\n  protected toDefinitions() {\n    const rootSchema = this.getRootSchema();\n    for (const e of this.map.values()) {\n      forEachRef(e, (schema, __refSchema) => {\n        if (isDefinitionPath(__refSchema.$ref)) return;\n\n        const refTitle = this.title(__refSchema.$ref);\n        const refSchema = this.map.get(refTitle);\n\n        if (refSchema) {\n          if (schema.title != refSchema.title) {\n            rootSchema.definitions[refSchema.title] =\n              this.toDefinitionSchema(refSchema);\n\n            if (keys(refSchema.definitions).length > 0) {\n              const refDefinitions = entries(refSchema.definitions);\n              for (const [key, value] of refDefinitions) {\n                rootSchema.definitions[key] = value;\n              }\n            }\n          }\n        } else {\n          console.log('>>>>> ', __refSchema.$ref);\n          console.log('>>>>> ', __refSchema);\n          console.log('>>>>> ', refTitle);\n\n          console.log(this.map.keys());\n\n          throw new KeyNotFoundError();\n        }\n      });\n    }\n\n    // Transform $ref paths definition paths\n    for (const e of this.map.values()) {\n      forEachRef(e, (rootSchema, referenceSchema) => {\n        if (isDefinitionPath(referenceSchema.$ref)) return;\n\n        const refSchema = this.map.get(this.title(referenceSchema.$ref));\n        if (refSchema) {\n          referenceSchema.$ref = `#/definitions/${refSchema.title}`;\n        } else {\n          throw new KeyNotFoundError();\n        }\n      });\n    }\n  }\n\n  async write() {\n    const rootSchema = this.getRootSchema() as JSONSchema;\n    delete rootSchema.$dirpath;\n    delete rootSchema.$filepath;\n\n    await writeJSONFile(this.main.replace(this.root, this.output), rootSchema);\n  }\n\n  async compile() {\n    await this.readAndMapSchemasByAbsolutePath();\n    this.toAbsoluteReferencePaths();\n    this.initializeEachDiefintionsIfUndefined();\n\n    console.log('------------------------------------');\n    console.log(this.map);\n    this.toDefinitions();\n    this.validateSchemas();\n    await this.write();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        libs/json/src/lib/init/init.ts\n            \n            function\n            init\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/schema/schema.ts\n            \n            function\n            schema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/tsc/tsc.ts\n            \n            function\n            tsc\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/for-each-ref.ts\n            \n            function\n            forEachRef\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/ready-schema.ts\n            \n            type alias\n            ReadyJSONSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/schema-config.ts\n            \n            function\n            schemaConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/json/src/lib/util/schema-manager.ts\n            \n            class\n            SchemaManager\n            \n                65 %\n                (13/20)\n            \n        \n        \n            \n                \n                        libs/json/src/lib/util/schema-manager.ts\n            \n            type alias\n            SchemaManagerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        libs/json/src/test/__test-utils.ts\n            \n            variable\n            safepath\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nx/devkit : 20.3.2\n        \n            commander : ^13.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            forEachRef   (libs/.../for-each-ref.ts)\n                        \n                        \n                            init   (libs/.../init.ts)\n                        \n                        \n                            schema   (libs/.../schema.ts)\n                        \n                        \n                            schemaConfig   (libs/.../schema-config.ts)\n                        \n                        \n                            tsc   (libs/.../tsc.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/lib/util/for-each-ref.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        forEachRef\n                        \n                    \n                \n            \n            \n                \nforEachRef(schema: ReadyJSONSchema, callback: ForEachKeyCallBack)\n                \n            \n\n\n\n\n            \n                \n                        Go through for each ref ,with root-schema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ReadyJSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                        ForEachKeyCallBack\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/init/init.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(root: string, templateFileDir: string)\n                \n            \n\n\n\n\n            \n                \n                        Generate the configuration file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                templateFileDir\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/schema/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n            \n                \nschema(options: SchemaManagerOptions)\n                \n            \n\n\n\n\n            \n                \n                        JSON schema compiler\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            SchemaManagerOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/util/schema-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schemaConfig\n                        \n                    \n                \n            \n            \n                \nschemaConfig(root: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    libs/json/src/lib/tsc/tsc.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tsc\n                        \n                    \n                \n            \n            \n                \ntsc()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nBrighline Software Comon Packages\nCommon packages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 8.1.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadyJSONSchema   (libs/.../ready-schema.ts)\n                        \n                        \n                            SchemaManagerOptions   (libs/.../schema-manager.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/lib/util/ready-schema.ts\n    \n    \n        \n            \n                \n                    \n                    ReadyJSONSchema\n                \n            \n            \n                \n                    The schema type that ready to use by the SchemaManager\n\n                \n            \n            \n                \n                            PickRequired\n\n                \n            \n        \n    \n    libs/json/src/lib/util/schema-manager.ts\n    \n    \n        \n            \n                \n                    \n                    SchemaManagerOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            safepath   (libs/.../__test-utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/json/src/test/__test-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        safepath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createPathScope(join(__dirname, './data'))\n                    \n                \n\n            \n                \n                    Root: ./schema\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
