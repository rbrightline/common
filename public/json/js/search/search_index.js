var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/SchemaManager.html",[0,0.755,1,1.247]],["body/classes/SchemaManager.html",[0,0.288,1,0.8,2,0.476,3,0.615,4,0.615,5,1.123,6,1.604,7,2.055,8,0.476,9,0.288,10,0.735,11,2.967,12,1.802,13,1.802,14,1.802,15,2.936,16,2.967,17,1.802,18,2.967,19,1.561,20,1.035,21,3.294,22,1.392,23,1.468,24,2.113,25,2.113,26,2.716,27,2.113,28,2.28,29,2.113,30,2.113,31,1.392,32,2.113,33,0.615,34,1.392,35,1.215,36,2.683,37,1.392,38,1.355,39,0.1,40,1.355,41,0.548,42,1.355,43,1.035,44,0.828,45,1.529,46,1.812,47,2.554,48,1.392,49,0.828,50,1.392,51,1.392,52,0.828,53,1.392,54,0.828,55,1.392,56,1.928,57,0.828,58,1.392,59,0.748,60,1.855,61,0.828,62,1.392,63,0.8,64,1.215,65,1.392,66,2.121,67,0.828,68,1.392,69,1.035,70,1.928,71,1.34,72,0.828,73,0.828,74,1.639,75,1.392,76,0.828,77,1.705,78,1.802,79,1.392,80,1.392,81,1.035,82,1.035,83,2.357,84,1.355,85,1.355,86,1.392,87,0.828,88,3.539,89,2.4,90,0.828,91,1.392,92,1.215,93,1.392,94,1.392,95,2.357,96,2.357,97,2.852,98,1.392,99,1.753,100,1.392,101,1.392,102,0.828,103,1.035,104,0.828,105,1.753,106,1.392,107,2.113,108,2.554,109,1.392,110,0.828,111,1.392,112,1.571,113,1.392,114,0.828,115,1.392,116,2.113,117,1.392,118,1.392,119,0.828,120,1.802,121,1.899,122,2.02,123,1.392,124,0.828,125,0.615,126,1.392,127,0.615,128,2.113,129,1.392,130,1.802,131,2.357,132,0.476,133,0.828,134,0.615,135,0.828,136,0.828,137,0.828,138,0.476,139,0.828,140,0.828,141,0.476,142,0.615,143,0.828,144,0.828,145,1.392,146,0.828,147,0.828,148,0.828,149,0.828,150,0.828,151,0.828,152,0.828,153,3.066,154,0.828,155,1.571,156,2.113,157,0.828,158,0.828,159,0.828,160,0.828,161,0.828,162,2.534,163,0.828,164,1.392,165,0.828,166,1.392,167,1.392,168,0.828,169,0.828,170,0.828,171,0.828,172,0.828,173,0.828,174,1.035,175,0.828,176,0.828,177,1.035,178,1.34,179,1.392,180,0.828,181,0.828,182,0.828,183,0.615,184,0.615,185,1.392,186,0.828,187,0.828,188,1.392,189,1.802,190,0.828,191,0.828,192,0.828,193,2.357,194,0.828,195,1.392,196,0.828,197,2.716,198,0.828,199,0.828,200,0.828,201,0.828,202,0.828,203,0.828,204,1.035,205,1.392,206,1.392,207,0.828,208,0.828,209,0.828,210,0.828,211,2.113,212,0.828,213,0.828,214,0.828,215,0.828,216,0.828,217,1.392,218,0.828,219,0.828,220,0.828,221,0.828,222,0.828,223,0.828,224,0.828,225,0.828,226,0.828,227,0.828,228,0.828,229,0.828,230,0.828,231,0.828,232,0.033,233,0.033]],["title/classes/TypeManager.html",[0,0.755,234,1.247]],["body/classes/TypeManager.html",[0,0.562,2,0.928,3,1.201,4,1.201,5,0.562,6,1.579,8,0.928,9,0.562,10,1.067,15,2.738,20,1.755,23,1.763,28,1.755,33,1.201,36,2.535,38,1.603,39,0.101,40,1.603,41,0.765,42,1.603,45,0.724,46,1.763,56,2.261,59,0.655,66,2.618,70,1.876,71,1.201,77,1.356,85,0.928,89,2.976,112,1.755,121,1.755,122,1.755,132,0.928,134,1.201,138,0.928,142,2.074,155,1.201,162,2.618,174,1.755,178,1.201,183,1.755,184,1.201,204,1.755,232,0.055,233,0.055,234,1.356,235,2.618,236,1.603,237,2.36,238,3.068,239,2.36,240,1.615,241,2.36,242,1.615,243,2.36,244,1.615,245,2.36,246,2.36,247,2.36,248,2.36,249,2.36,250,1.615,251,2.36,252,1.615,253,1.615,254,1.615,255,1.615,256,1.615,257,2.36,258,1.615,259,1.615,260,1.615,261,1.615,262,2.789,263,1.615,264,1.615,265,3.068,266,1.615,267,3.068,268,1.615,269,3.409,270,2.36,271,2.36,272,1.615,273,1.615,274,1.615,275,1.615,276,1.615,277,1.615,278,1.615,279,1.615,280,1.615,281,1.615,282,1.615,283,1.615,284,1.615,285,2.36,286,1.615,287,2.36,288,1.615,289,1.615,290,1.615,291,1.615,292,1.615,293,1.615,294,1.615,295,1.615]],["title/coverage.html",[296,2.159]],["body/coverage.html",[0,0.686,1,0.731,5,0.443,6,1.32,7,1.133,8,1.133,35,0.731,39,0.099,41,0.811,59,0.245,60,0.731,74,0.731,82,2.189,84,0.731,105,0.946,141,0.731,177,3.134,232,0.046,233,0.046,234,0.731,235,0.946,296,0.946,297,0.946,298,1.272,299,1.272,300,4.053,301,4.214,302,1.272,303,4.214,304,1.272,305,1.272,306,1.272,307,1.272,308,1.272,309,1.272,310,1.272,311,1.272,312,1.272,313,1.272,314,1.272,315,1.272,316,1.272,317,1.272,318,1.272,319,1.272,320,1.272,321,1.272,322,1.272,323,1.272,324,1.272,325,1.272,326,1.272,327,1.272,328,1.272,329,1.272,330,1.272,331,1.272,332,1.272,333,0.946,334,0.731,335,3.357,336,3.357,337,0.946,338,0.946,339,1.272,340,1.272,341,0.946,342,1.272,343,1.272,344,1.272,345,1.272,346,0.946,347,2.415,348,0.946,349,0.946,350,0.946,351,0.946,352,0.946,353,0.946,354,0.946,355,3.021,356,3.021,357,0.946,358,1.272,359,1.272,360,1.272,361,1.272,362,1.272,363,1.272,364,1.272,365,1.272,366,1.272,367,1.272,368,1.272,369,1.272,370,1.272,371,0.946,372,1.272,373,1.272,374,1.272,375,1.272,376,1.272,377,1.272,378,1.272,379,1.272,380,1.272,381,1.272,382,1.272,383,1.272,384,1.272,385,1.272,386,1.272,387,1.272,388,1.272]],["title/dependencies.html",[389,1.37,390,1.929]],["body/dependencies.html",[39,0.098,125,2.312,127,2.312,132,1.787,138,1.787,232,0.085,233,0.085,390,2.312,391,3.012,392,3.109,393,3.109,394,3.109,395,3.109,396,3.109]],["title/miscellaneous/functions.html",[397,0.826,398,1.929]],["body/miscellaneous/functions.html",[5,1.196,6,1.391,7,1.379,9,0.835,19,1.975,23,1.783,35,2.253,38,2.162,39,0.094,40,2.162,41,0.723,42,2.162,43,2.555,45,1.077,56,2.214,59,0.754,63,1.379,64,1.379,70,1.783,74,1.783,77,1.379,84,1.975,85,1.379,92,1.379,103,1.784,141,1.783,232,0.072,233,0.072,236,1.379,333,1.784,334,1.783,337,1.784,338,2.306,341,2.306,349,1.784,350,1.784,351,2.306,397,1.077,398,1.784,399,2.4,400,2.4,401,2.4,402,2.4,403,2.4,404,2.4,405,3.101,406,3.101,407,2.4,408,2.4,409,2.4,410,2.4,411,3.101,412,1.783,413,2.306,414,2.4,415,2.4,416,2.306,417,2.4,418,1.784,419,1.784,420,1.784,421,2.4,422,2.4,423,2.4,424,2.4,425,2.4,426,2.4,427,1.379]],["title/index.html",[9,0.641,428,1.842,429,1.842]],["body/index.html",[5,1.234,10,0.892,39,0.083,41,0.622,59,0.787,60,1.474,63,2.14,64,1.86,69,2.407,81,1.908,92,1.86,232,0.076,233,0.076,236,1.474,297,2.407,334,1.474,412,2.353,416,2.637,418,1.908,419,2.407,420,1.908,427,1.474,430,2.565,431,2.855,432,1.908,433,3.236,434,2.565,435,3.236,436,1.908,437,2.565,438,2.565,439,2.565,440,2.565,441,2.565,442,3.839,443,2.565,444,2.565,445,2.565,446,2.565,447,2.565,448,2.565,449,3.236,450,2.565,451,2.565,452,2.565,453,2.565,454,2.565,455,1.474,456,2.565,457,3.236,458,3.236,459,3.236,460,2.565,461,2.565,462,2.565]],["title/modules.html",[463,2.159]],["body/modules.html",[39,0.088,232,0.088,233,0.088,463,2.455]],["title/overview.html",[464,2.159]],["body/overview.html",[2,1.887,39,0.088,232,0.088,233,0.088,464,2.441,465,3.282]],["title/properties.html",[10,0.902,389,1.37]],["body/properties.html",[10,1.044,39,0.097,41,0.577,59,0.685,232,0.083,233,0.083,391,2.231,412,2.259,413,2.231,427,2.047,431,2.825,432,2.231,436,2.231,466,3,467,3,468,3,469,3,470,3,471,3,472,3,473,3,474,3,475,3,476,3]],["title/miscellaneous/variables.html",[397,0.826,455,1.491]],["body/miscellaneous/variables.html",[9,1.035,19,1.71,39,0.096,41,0.572,45,1.699,46,2.176,59,0.572,99,2.213,232,0.083,233,0.083,346,2.213,348,2.636,352,2.213,353,2.636,354,2.636,355,2.213,356,2.213,357,2.636,371,2.213,397,1.335,455,1.71,477,2.976,478,2.976,479,2.976,480,2.976,481,2.976,482,2.976,483,2.976]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":177,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["0.5.11",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":303,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["13.1.0",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["16/19",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":465,"title":{},"body":{"overview.html":{}}}],["84",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["9.5.0",{"_index":391,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["__getenumtype",{"_index":260,"title":{},"body":{"classes/TypeManager.html":{}}}],["__getenumtype(schema.enum",{"_index":271,"title":{},"body":{"classes/TypeManager.html":{}}}],["__refschema",{"_index":207,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__toabsolutereferencepaths",{"_index":173,"title":{},"body":{"classes/SchemaManager.html":{}}}],["__toabsolutereferencepaths(value",{"_index":185,"title":{},"body":{"classes/SchemaManager.html":{}}}],["_array",{"_index":302,"title":{},"body":{"coverage.html":{}}}],["_boolean",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["_commonnumber",{"_index":305,"title":{},"body":{"coverage.html":{}}}],["_commonproperty",{"_index":306,"title":{},"body":{"coverage.html":{}}}],["_date",{"_index":307,"title":{},"body":{"coverage.html":{}}}],["_dto",{"_index":308,"title":{},"body":{"coverage.html":{}}}],["_encryption",{"_index":309,"title":{},"body":{"coverage.html":{}}}],["_general",{"_index":310,"title":{},"body":{"coverage.html":{}}}],["_icon",{"_index":311,"title":{},"body":{"coverage.html":{}}}],["_inputtype",{"_index":312,"title":{},"body":{"coverage.html":{}}}],["_integer",{"_index":313,"title":{},"body":{"coverage.html":{}}}],["_intergerpropertyoptionsraw",{"_index":314,"title":{},"body":{"coverage.html":{}}}],["_model",{"_index":315,"title":{},"body":{"coverage.html":{}}}],["_modelname",{"_index":316,"title":{},"body":{"coverage.html":{}}}],["_number",{"_index":317,"title":{},"body":{"coverage.html":{}}}],["_numberformat",{"_index":318,"title":{},"body":{"coverage.html":{}}}],["_object",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["_ondelete",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["_onupdate",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["_property",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["_propertyname",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["_propertytype",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["_relation",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["_relationpropertyoptionsraw",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["_relationtype",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["_string",{"_index":328,"title":{},"body":{"coverage.html":{}}}],["_stringformat",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["_transform",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["_uiproperty",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["_validation",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["absolute",{"_index":97,"title":{},"body":{"classes/SchemaManager.html":{}}}],["add",{"_index":444,"title":{},"body":{"index.html":{}}}],["alias",{"_index":301,"title":{},"body":{"coverage.html":{}}}],["allof",{"_index":247,"title":{},"body":{"classes/TypeManager.html":{}}}],["allof,oneof",{"_index":439,"title":{},"body":{"index.html":{}}}],["array",{"_index":274,"title":{},"body":{"classes/TypeManager.html":{}}}],["arrayoptions",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["assets/schema/bundle.schema.ts",{"_index":300,"title":{},"body":{"coverage.html":{}}}],["async",{"_index":21,"title":{},"body":{"classes/SchemaManager.html":{}}}],["author",{"_index":474,"title":{},"body":{"properties.html":{}}}],["await",{"_index":156,"title":{},"body":{"classes/SchemaManager.html":{}}}],["before",{"_index":447,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":273,"title":{},"body":{"classes/TypeManager.html":{}}}],["booleanoptions",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["brightline",{"_index":476,"title":{},"body":{"properties.html":{}}}],["callback",{"_index":405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":269,"title":{},"body":{"classes/TypeManager.html":{}}}],["class",{"_index":0,"title":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"overview.html":{}}}],["cleanextras",{"_index":22,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cleanextras(schema",{"_index":65,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cli",{"_index":432,"title":{},"body":{"index.html":{},"properties.html":{}}}],["clone",{"_index":133,"title":{},"body":{"classes/SchemaManager.html":{}}}],["clone(schema",{"_index":196,"title":{},"body":{"classes/SchemaManager.html":{}}}],["clone(this.getrootschema",{"_index":230,"title":{},"body":{"classes/SchemaManager.html":{}}}],["command",{"_index":449,"title":{},"body":{"index.html":{}}}],["commander",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["commonnumberoptions",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["commonpropertyoptions",{"_index":361,"title":{},"body":{"coverage.html":{}}}],["compile",{"_index":23,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["compiled",{"_index":69,"title":{},"body":{"classes/SchemaManager.html":{},"index.html":{}}}],["compiler",{"_index":431,"title":{},"body":{"index.html":{},"properties.html":{}}}],["compiler/for",{"_index":337,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["compiler/ready",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["compiler/schema",{"_index":7,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["compiler/type",{"_index":235,"title":{},"body":{"classes/TypeManager.html":{},"coverage.html":{}}}],["compiles",{"_index":433,"title":{},"body":{"index.html":{}}}],["complex",{"_index":440,"title":{},"body":{"index.html":{}}}],["config.ts",{"_index":341,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configure",{"_index":454,"title":{},"body":{"index.html":{}}}],["const",{"_index":162,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["constructor",{"_index":33,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["constructor(options",{"_index":34,"title":{},"body":{"classes/SchemaManager.html":{}}}],["constructor(protected",{"_index":253,"title":{},"body":{"classes/TypeManager.html":{}}}],["constructor(schema",{"_index":240,"title":{},"body":{"classes/TypeManager.html":{}}}],["content",{"_index":423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convert",{"_index":111,"title":{},"body":{"classes/SchemaManager.html":{}}}],["coverage",{"_index":296,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":103,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["createpathscope(cwd",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpathscope(join(__dirname",{"_index":482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":453,"title":{},"body":{"index.html":{}}}],["cschema",{"_index":195,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$dirpath",{"_index":200,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$filepath",{"_index":201,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.$schema",{"_index":199,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.definitions",{"_index":202,"title":{},"body":{"classes/SchemaManager.html":{}}}],["cschema.title",{"_index":198,"title":{},"body":{"classes/SchemaManager.html":{}}}],["data",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dateoptions",{"_index":362,"title":{},"body":{"coverage.html":{}}}],["default",{"_index":45,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmainfilepath",{"_index":12,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultoutuptpath",{"_index":13,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defaultrootpath",{"_index":14,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defined",{"_index":36,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["definition",{"_index":116,"title":{},"body":{"classes/SchemaManager.html":{}}}],["definitions",{"_index":77,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["definitions/${refschema.title",{"_index":224,"title":{},"body":{"classes/SchemaManager.html":{}}}],["defs",{"_index":285,"title":{},"body":{"classes/TypeManager.html":{}}}],["delete",{"_index":197,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dependencies",{"_index":390,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descendant",{"_index":91,"title":{},"body":{"classes/SchemaManager.html":{}}}],["description",{"_index":413,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["detailed",{"_index":462,"title":{},"body":{"index.html":{}}}],["directory",{"_index":64,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["dirpath",{"_index":96,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dist",{"_index":51,"title":{},"body":{"classes/SchemaManager.html":{}}}],["dist/model.ts",{"_index":356,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":297,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["e",{"_index":204,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["e)).join",{"_index":264,"title":{},"body":{"classes/TypeManager.html":{}}}],["e.$dirpath",{"_index":192,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.$filepath",{"_index":191,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.definitions",{"_index":189,"title":{},"body":{"classes/SchemaManager.html":{}}}],["e.title",{"_index":190,"title":{},"body":{"classes/SchemaManager.html":{}}}],["each",{"_index":84,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryption",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["entiry",{"_index":58,"title":{},"body":{"classes/SchemaManager.html":{}}}],["entries",{"_index":134,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["entries(definitions",{"_index":286,"title":{},"body":{"classes/TypeManager.html":{}}}],["entries(refschema.definitions",{"_index":218,"title":{},"body":{"classes/SchemaManager.html":{}}}],["entries(schema.properties",{"_index":279,"title":{},"body":{"classes/TypeManager.html":{}}}],["enum",{"_index":249,"title":{},"body":{"classes/TypeManager.html":{}}}],["enums",{"_index":261,"title":{},"body":{"classes/TypeManager.html":{}}}],["enums.map((e",{"_index":263,"title":{},"body":{"classes/TypeManager.html":{}}}],["example",{"_index":442,"title":{},"body":{"index.html":{}}}],["export",{"_index":142,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["filename",{"_index":98,"title":{},"body":{"classes/SchemaManager.html":{}}}],["filepath",{"_index":88,"title":{},"body":{"classes/SchemaManager.html":{}}}],["files",{"_index":418,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["following",{"_index":452,"title":{},"body":{"index.html":{}}}],["foreachjsonschemafile",{"_index":123,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachkeycallback",{"_index":406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["foreachref",{"_index":141,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["foreachref(e",{"_index":206,"title":{},"body":{"classes/SchemaManager.html":{}}}],["foreachref(schema",{"_index":404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":82,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["functions",{"_index":398,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":445,"title":{},"body":{"index.html":{}}}],["general",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["generate",{"_index":437,"title":{},"body":{"index.html":{}}}],["generator",{"_index":436,"title":{},"body":{"index.html":{},"properties.html":{}}}],["getlastsegment",{"_index":135,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getlastsegment(filepath",{"_index":158,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getrootschema",{"_index":24,"title":{},"body":{"classes/SchemaManager.html":{}}}],["getting",{"_index":428,"title":{"index.html":{}},"body":{}}],["gettype",{"_index":237,"title":{},"body":{"classes/TypeManager.html":{}}}],["gettype(schema",{"_index":243,"title":{},"body":{"classes/TypeManager.html":{}}}],["go",{"_index":407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["haskeys",{"_index":136,"title":{},"body":{"classes/SchemaManager.html":{}}}],["haskeys(schema",{"_index":169,"title":{},"body":{"classes/SchemaManager.html":{}}}],["homepage",{"_index":468,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/common/tree/main/libs/json",{"_index":473,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/common/json",{"_index":469,"title":{},"body":{"properties.html":{}}}],["iconoptions",{"_index":366,"title":{},"body":{"coverage.html":{}}}],["identifier",{"_index":298,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":122,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["init",{"_index":334,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["init(root",{"_index":410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["initialize",{"_index":451,"title":{},"body":{"index.html":{}}}],["initialized",{"_index":450,"title":{},"body":{"index.html":{}}}],["initializeeachdiefintionsifundefined",{"_index":25,"title":{},"body":{"classes/SchemaManager.html":{}}}],["inputtypeoptions",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["installation",{"_index":441,"title":{},"body":{"index.html":{}}}],["int",{"_index":109,"title":{},"body":{"classes/SchemaManager.html":{}}}],["integer",{"_index":272,"title":{},"body":{"classes/TypeManager.html":{}}}],["integeroptions",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["intergerpropertyoptionsraw",{"_index":369,"title":{},"body":{"coverage.html":{}}}],["isabsolute",{"_index":139,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(schema.$ref",{"_index":181,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.main",{"_index":154,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isabsolute(this.root",{"_index":152,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath",{"_index":137,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(__refschema.$ref",{"_index":208,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(referenceschema.$ref",{"_index":221,"title":{},"body":{"classes/SchemaManager.html":{}}}],["isdefinitionpath(schema.$ref",{"_index":180,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join",{"_index":140,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join($filepath",{"_index":182,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(__dirname",{"_index":47,"title":{},"body":{"classes/SchemaManager.html":{}}}],["join(schema.$filepath",{"_index":168,"title":{},"body":{"classes/SchemaManager.html":{}}}],["json",{"_index":412,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["jsonschema",{"_index":66,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["key",{"_index":121,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["key.tostring()}${schema.required",{"_index":281,"title":{},"body":{"classes/TypeManager.html":{}}}],["keynotfounderror",{"_index":128,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keys",{"_index":78,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keys(refschema.definitions).length",{"_index":216,"title":{},"body":{"classes/SchemaManager.html":{}}}],["keywords",{"_index":467,"title":{},"body":{"properties.html":{}}}],["license",{"_index":470,"title":{},"body":{"properties.html":{}}}],["link",{"_index":143,"title":{},"body":{"classes/SchemaManager.html":{}}}],["m",{"_index":357,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":17,"title":{},"body":{"classes/SchemaManager.html":{}}}],["main.schema.json",{"_index":48,"title":{},"body":{"classes/SchemaManager.html":{}}}],["mainfilepath",{"_index":50,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts",{"_index":8,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{}}}],["manager.ts:102",{"_index":242,"title":{},"body":{"classes/TypeManager.html":{}}}],["manager.ts:126",{"_index":104,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:159",{"_index":76,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:168",{"_index":119,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:177",{"_index":73,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:188",{"_index":114,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:201",{"_index":110,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:24",{"_index":244,"title":{},"body":{"classes/TypeManager.html":{}}}],["manager.ts:246",{"_index":67,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:256",{"_index":72,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:27",{"_index":54,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:32",{"_index":49,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:37",{"_index":52,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:42",{"_index":61,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:46",{"_index":57,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:5",{"_index":241,"title":{},"body":{"classes/TypeManager.html":{}}}],["manager.ts:53",{"_index":37,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:70",{"_index":87,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:79",{"_index":102,"title":{},"body":{"classes/SchemaManager.html":{}}}],["manager.ts:8",{"_index":252,"title":{},"body":{"classes/TypeManager.html":{}}}],["manager.ts:84",{"_index":250,"title":{},"body":{"classes/TypeManager.html":{}}}],["manager.ts:92",{"_index":90,"title":{},"body":{"classes/SchemaManager.html":{}}}],["map",{"_index":18,"title":{},"body":{"classes/SchemaManager.html":{}}}],["matching",{"_index":233,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["miscellaneous",{"_index":397,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingpropertyerror",{"_index":129,"title":{},"body":{"classes/SchemaManager.html":{}}}],["mit",{"_index":471,"title":{},"body":{"properties.html":{}}}],["modelnameoptions",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["modeloptions",{"_index":371,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":463,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["multiple",{"_index":434,"title":{},"body":{"index.html":{}}}],["name",{"_index":40,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":126,"title":{},"body":{"classes/SchemaManager.html":{}}}],["never",{"_index":75,"title":{},"body":{"classes/SchemaManager.html":{}}}],["new",{"_index":60,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"index.html":{}}}],["notabsolutepatherror",{"_index":130,"title":{},"body":{"classes/SchemaManager.html":{}}}],["number",{"_index":262,"title":{},"body":{"classes/TypeManager.html":{}}}],["numberformatoptions",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["numberoptions",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["object",{"_index":184,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["object.entries(schema",{"_index":175,"title":{},"body":{"classes/SchemaManager.html":{}}}],["objectoptions",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["ondelete",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["one",{"_index":245,"title":{},"body":{"classes/TypeManager.html":{}}}],["oneof",{"_index":246,"title":{},"body":{"classes/TypeManager.html":{}}}],["onupdate",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["optional",{"_index":42,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":43,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{}}}],["options?.main",{"_index":149,"title":{},"body":{"classes/SchemaManager.html":{}}}],["options?.root",{"_index":146,"title":{},"body":{"classes/SchemaManager.html":{}}}],["output",{"_index":458,"title":{},"body":{"index.html":{}}}],["outuptpath",{"_index":53,"title":{},"body":{"classes/SchemaManager.html":{}}}],["overview",{"_index":464,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":348,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":389,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":174,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["pairs.length",{"_index":176,"title":{},"body":{"classes/SchemaManager.html":{}}}],["param",{"_index":155,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["parameters",{"_index":38,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["pascalcase",{"_index":161,"title":{},"body":{"classes/SchemaManager.html":{}}}],["path",{"_index":99,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/variables.html":{}}}],["paths",{"_index":108,"title":{},"body":{"classes/SchemaManager.html":{}}}],["pnpm",{"_index":443,"title":{},"body":{"index.html":{}}}],["portable",{"_index":435,"title":{},"body":{"index.html":{}}}],["precompile",{"_index":238,"title":{},"body":{"classes/TypeManager.html":{}}}],["project",{"_index":63,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["project's",{"_index":414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["promise",{"_index":425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"index.html":{},"properties.html":{}}}],["propertynameoptions",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["propertyoptions",{"_index":378,"title":{},"body":{"coverage.html":{}}}],["propertytypeoptions",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["props",{"_index":278,"title":{},"body":{"classes/TypeManager.html":{}}}],["props.join('\\n",{"_index":283,"title":{},"body":{"classes/TypeManager.html":{}}}],["props.push",{"_index":280,"title":{},"body":{"classes/TypeManager.html":{}}}],["protected",{"_index":15,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["provided",{"_index":459,"title":{},"body":{"index.html":{}}}],["read",{"_index":26,"title":{},"body":{"classes/SchemaManager.html":{}}}],["read(filepath",{"_index":86,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readandmapschemasbyabsolutepath",{"_index":27,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile",{"_index":124,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readjsonfile(filepath",{"_index":157,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readonly",{"_index":16,"title":{},"body":{"classes/SchemaManager.html":{}}}],["ready",{"_index":120,"title":{},"body":{"classes/SchemaManager.html":{}}}],["readyjsonschema",{"_index":74,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["recursive",{"_index":171,"title":{},"body":{"classes/SchemaManager.html":{}}}],["ref",{"_index":112,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["ref.ts",{"_index":338,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["refdefinitions",{"_index":217,"title":{},"body":{"classes/SchemaManager.html":{}}}],["reference",{"_index":107,"title":{},"body":{"classes/SchemaManager.html":{}}}],["references",{"_index":81,"title":{},"body":{"classes/SchemaManager.html":{},"index.html":{}}}],["referenceschema",{"_index":220,"title":{},"body":{"classes/SchemaManager.html":{}}}],["referenceschema.$ref",{"_index":223,"title":{},"body":{"classes/SchemaManager.html":{}}}],["refpath",{"_index":409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["refs",{"_index":421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["refschema",{"_index":211,"title":{},"body":{"classes/SchemaManager.html":{}}}],["refschema.title",{"_index":213,"title":{},"body":{"classes/SchemaManager.html":{}}}],["reftitle",{"_index":209,"title":{},"body":{"classes/SchemaManager.html":{}}}],["regular",{"_index":115,"title":{},"body":{"classes/SchemaManager.html":{}}}],["relationoptions",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["relationpropertyoptionsraw",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["relationtype",{"_index":382,"title":{},"body":{"coverage.html":{}}}],["relative",{"_index":106,"title":{},"body":{"classes/SchemaManager.html":{}}}],["removing",{"_index":117,"title":{},"body":{"classes/SchemaManager.html":{}}}],["replace('.json",{"_index":159,"title":{},"body":{"classes/SchemaManager.html":{}}}],["replace('.schema",{"_index":160,"title":{},"body":{"classes/SchemaManager.html":{}}}],["repository",{"_index":472,"title":{},"body":{"properties.html":{}}}],["required",{"_index":94,"title":{},"body":{"classes/SchemaManager.html":{}}}],["requirederror",{"_index":131,"title":{},"body":{"classes/SchemaManager.html":{}}}],["resolving",{"_index":420,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["results",{"_index":232,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":89,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["returns",{"_index":70,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["rline/fs",{"_index":125,"title":{},"body":{"classes/SchemaManager.html":{},"dependencies.html":{}}}],["rline/is",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["rline/json",{"_index":430,"title":{},"body":{"index.html":{}}}],["rline/jsonusage",{"_index":446,"title":{},"body":{"index.html":{}}}],["rline/names",{"_index":127,"title":{},"body":{"classes/SchemaManager.html":{},"dependencies.html":{}}}],["rline/type",{"_index":132,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"dependencies.html":{}}}],["rline/utils",{"_index":138,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"dependencies.html":{}}}],["robert",{"_index":475,"title":{},"body":{"properties.html":{}}}],["root",{"_index":19,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["rootpath",{"_index":55,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema",{"_index":193,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.definitions[key",{"_index":219,"title":{},"body":{"classes/SchemaManager.html":{}}}],["rootschema.definitions[refschema.title",{"_index":214,"title":{},"body":{"classes/SchemaManager.html":{}}}],["safe",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safepath",{"_index":354,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":457,"title":{},"body":{"index.html":{}}}],["schem",{"_index":62,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema",{"_index":59,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["schema(options",{"_index":417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schema.$dirpath",{"_index":167,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$filepath",{"_index":166,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.$ref",{"_index":178,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["schema.allof",{"_index":258,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.allof.map((e",{"_index":259,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.config.json",{"_index":416,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["schema.const",{"_index":265,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.enum",{"_index":270,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.items",{"_index":275,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.oneof",{"_index":255,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.oneof.map((e",{"_index":256,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.properties",{"_index":277,"title":{},"body":{"classes/TypeManager.html":{}}}],["schema.title",{"_index":164,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schema.ts",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["schema.type",{"_index":267,"title":{},"body":{"classes/TypeManager.html":{}}}],["schemaconfig",{"_index":35,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["schemaconfig(root",{"_index":422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["schemaexample",{"_index":456,"title":{},"body":{"index.html":{}}}],["schemamanager",{"_index":1,"title":{"classes/SchemaManager.html":{}},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["schemamanager.defaultmainfilepath",{"_index":150,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemamanager.defaultrootpath",{"_index":147,"title":{},"body":{"classes/SchemaManager.html":{}}}],["schemas",{"_index":92,"title":{},"body":{"classes/SchemaManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["schematypescript",{"_index":460,"title":{},"body":{"index.html":{}}}],["set",{"_index":83,"title":{},"body":{"classes/SchemaManager.html":{}}}],["setting",{"_index":144,"title":{},"body":{"classes/SchemaManager.html":{}}}],["single",{"_index":419,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["skip",{"_index":179,"title":{},"body":{"classes/SchemaManager.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["src/.../__test",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../for",{"_index":399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../init.ts",{"_index":400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../model.ts",{"_index":477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../program.ts",{"_index":478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../schema",{"_index":402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../schema.ts",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tsc.ts",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/init/init.ts",{"_index":333,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/json",{"_index":6,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/program.ts",{"_index":346,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/schema/schema.ts",{"_index":349,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/tsc/tsc.ts",{"_index":350,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/test/__test",{"_index":352,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/test/data/schema",{"_index":355,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":429,"title":{"index.html":{}},"body":{}}],["statements",{"_index":299,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":11,"title":{},"body":{"classes/SchemaManager.html":{}}}],["store",{"_index":80,"title":{},"body":{"classes/SchemaManager.html":{}}}],["string",{"_index":56,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["string,number",{"_index":248,"title":{},"body":{"classes/TypeManager.html":{}}}],["stringformatoptions",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["stringoptions",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["supports",{"_index":438,"title":{},"body":{"index.html":{}}}],["swc/helpers",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":268,"title":{},"body":{"classes/TypeManager.html":{}}}],["table",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["templatefiledir",{"_index":411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["this.cleanextras(schema",{"_index":231,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.getrootschema",{"_index":203,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.gettype",{"_index":282,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.gettype(e)).join",{"_index":257,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.gettype(schema.items",{"_index":276,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.gettype(this.schema",{"_index":293,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.gettype(value",{"_index":289,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.initializeeachdiefintionsifundefined",{"_index":227,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.main",{"_index":148,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach((e",{"_index":188,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.foreach((value",{"_index":186,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(reftitle",{"_index":212,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(this.title(referenceschema.$ref",{"_index":222,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.get(this.title(this.main",{"_index":194,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.set(schema.title",{"_index":170,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.map.values",{"_index":205,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.precompile",{"_index":294,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.read(filepath",{"_index":163,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.readandmapschemasbyabsolutepath",{"_index":225,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.root",{"_index":145,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.schema",{"_index":284,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.schema.title",{"_index":291,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.title(__refschema.$ref",{"_index":210,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.title(filepath",{"_index":165,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.toabsolutereferencepaths",{"_index":226,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.todefinitions",{"_index":228,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.todefinitionschema(refschema",{"_index":215,"title":{},"body":{"classes/SchemaManager.html":{}}}],["this.typename",{"_index":290,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.typename(key",{"_index":288,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.typename(schema.$ref.split('/').pop",{"_index":254,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.types.join('\\n",{"_index":295,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.types.push",{"_index":287,"title":{},"body":{"classes/TypeManager.html":{}}}],["this.validateschemas",{"_index":229,"title":{},"body":{"classes/SchemaManager.html":{}}}],["through",{"_index":408,"title":{},"body":{"miscellaneous/functions.html":{}}}],["throw",{"_index":153,"title":{},"body":{"classes/SchemaManager.html":{}}}],["title",{"_index":28,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["title(filepath",{"_index":101,"title":{},"body":{"classes/SchemaManager.html":{}}}],["toabsolutereferencepaths",{"_index":29,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitions",{"_index":30,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitionschema",{"_index":31,"title":{},"body":{"classes/SchemaManager.html":{}}}],["todefinitionschema(schema",{"_index":113,"title":{},"body":{"classes/SchemaManager.html":{}}}],["transform",{"_index":105,"title":{},"body":{"classes/SchemaManager.html":{},"coverage.html":{}}}],["true",{"_index":172,"title":{},"body":{"classes/SchemaManager.html":{}}}],["tsc",{"_index":351,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tsc(options",{"_index":426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tscdocumentation",{"_index":461,"title":{},"body":{"index.html":{}}}],["type",{"_index":41,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["typemanager",{"_index":234,"title":{"classes/TypeManager.html":{}},"body":{"classes/TypeManager.html":{},"coverage.html":{}}}],["typename",{"_index":239,"title":{},"body":{"classes/TypeManager.html":{}}}],["typename(title",{"_index":251,"title":{},"body":{"classes/TypeManager.html":{}}}],["typeof",{"_index":183,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["types",{"_index":236,"title":{},"body":{"classes/TypeManager.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["typescript",{"_index":427,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["uipropertyoptions",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["undefined",{"_index":266,"title":{},"body":{"classes/TypeManager.html":{}}}],["under",{"_index":93,"title":{},"body":{"classes/SchemaManager.html":{}}}],["unique",{"_index":100,"title":{},"body":{"classes/SchemaManager.html":{}}}],["unknown",{"_index":71,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{}}}],["unkown",{"_index":292,"title":{},"body":{"classes/TypeManager.html":{}}}],["unnecessary",{"_index":118,"title":{},"body":{"classes/SchemaManager.html":{}}}],["used",{"_index":79,"title":{},"body":{"classes/SchemaManager.html":{}}}],["using",{"_index":448,"title":{},"body":{"index.html":{}}}],["utils.ts",{"_index":353,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validateschemas",{"_index":32,"title":{},"body":{"classes/SchemaManager.html":{}}}],["validating",{"_index":151,"title":{},"body":{"classes/SchemaManager.html":{}}}],["validation",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["value",{"_index":46,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/variables.html":{}}}],["value.$filepath",{"_index":187,"title":{},"body":{"classes/SchemaManager.html":{}}}],["values",{"_index":95,"title":{},"body":{"classes/SchemaManager.html":{}}}],["variable",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":455,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":466,"title":{},"body":{"properties.html":{}}}],["void",{"_index":85,"title":{},"body":{"classes/SchemaManager.html":{},"classes/TypeManager.html":{},"miscellaneous/functions.html":{}}}],["write",{"_index":68,"title":{},"body":{"classes/SchemaManager.html":{}}}],["yes",{"_index":44,"title":{},"body":{"classes/SchemaManager.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/SchemaManager.html":{"url":"classes/SchemaManager.html","title":"class - SchemaManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/json-compiler/schema-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                defaultMainFilePath\n                            \n                            \n                                    Static\n                                defaultOutuptPath\n                            \n                            \n                                    Static\n                                defaultRootPath\n                            \n                            \n                                    Protected\n                                    Readonly\n                                main\n                            \n                            \n                                    Protected\n                                    Readonly\n                                map\n                            \n                            \n                                    Protected\n                                    Readonly\n                                root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                cleanExtras\n                            \n                            \n                                    Async\n                                compile\n                            \n                            \n                                    Protected\n                                getRootSchema\n                            \n                            \n                                    Protected\n                                initializeEachDiefintionsIfUndefined\n                            \n                            \n                                    Protected\n                                    Async\n                                read\n                            \n                            \n                                    Protected\n                                    Async\n                                readAndMapSchemasByAbsolutePath\n                            \n                            \n                                    Protected\n                                title\n                            \n                            \n                                    Protected\n                                toAbsoluteReferencePaths\n                            \n                            \n                                    Protected\n                                toDefinitions\n                            \n                            \n                                    Protected\n                                toDefinitionSchema\n                            \n                            \n                                    Protected\n                                validateSchemas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: SchemaConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/json-compiler/schema-manager.ts:53\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultMainFilePath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './main.schema.json')\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:32\n                        \n                    \n\n            \n                \n                    Default mainfilepath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultOutuptPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './dist')\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:37\n                        \n                    \n\n            \n                \n                    Default outuptpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        defaultRootPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, './')\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:27\n                        \n                    \n\n            \n                \n                    Default rootpath\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        main\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:46\n                        \n                    \n\n            \n                \n                    Entiry schema file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        map\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:53\n                        \n                    \n\n            \n                \n                    Schema map\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        root\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-compiler/schema-manager.ts:42\n                        \n                    \n\n            \n                \n                    Schem project root directory\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        cleanExtras\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanExtras(schema: JSONSchema)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:246\n                        \n                    \n\n\n            \n                \n                        Write the compiled schema into file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        compile\n                        \n                    \n                \n            \n            \n                \n                        \n                    compile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:256\n                        \n                    \n\n\n            \n                \n                        Compile schema\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getRootSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRootSchema()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:177\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ReadyJSONSchema | never\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        initializeEachDiefintionsIfUndefined\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeEachDiefintionsIfUndefined()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:159\n                        \n                    \n\n\n            \n                \n                        Definitions keys is used to store references. So, this function set default value ({}) for each schema\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        read\n                        \n                    \n                \n            \n            \n                \n                        \n                    read(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:70\n                        \n                    \n\n\n            \n                \n                        Read JSONSchema file by filepath and return the schema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        readAndMapSchemasByAbsolutePath\n                        \n                    \n                \n            \n            \n                \n                        \n                    readAndMapSchemasByAbsolutePath()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:92\n                        \n                    \n\n\n            \n                \n                        Read all descendant schemas under the root directory,\nThen set default (required values), $filepath, $dirpath, title, and definitions\nThen map them by their own absolute filename path so which will be unique for each file\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        title\n                        \n                    \n                \n            \n            \n                \n                        \n                    title(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:79\n                        \n                    \n\n\n            \n                \n                        Create schema title from schema filepath\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toAbsoluteReferencePaths\n                        \n                    \n                \n            \n            \n                \n                        \n                    toAbsoluteReferencePaths()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:126\n                        \n                    \n\n\n            \n                \n                        Transform all relative reference paths int he schemas into absolute paths\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toDefinitions\n                        \n                    \n                \n            \n            \n                \n                        \n                    toDefinitions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:201\n                        \n                    \n\n\n            \n                \n                        Convert absolute $ref values into definitions\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        toDefinitionSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    toDefinitionSchema(schema: ReadyJSONSchema)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:188\n                        \n                    \n\n\n            \n                \n                        Transform a regular schema file into definition by removing unnecessary properties\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ReadyJSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JSONSchema\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        validateSchemas\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateSchemas()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-compiler/schema-manager.ts:168\n                        \n                    \n\n\n            \n                \n                        The ready-schema must have title, $filepath, $dirpath, and definitions key defined.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forEachJSONSchemaFile, readJSONFile } from '@rline/fs';\nimport { names } from '@rline/names';\nimport {\n  JSONSchema,\n  KeyNotFoundError,\n  MissingPropertyError,\n  NotAbsolutePathError,\n  RequiredError,\n  SchemaConfig,\n} from '@rline/type';\nimport {\n  clone,\n  entries,\n  getLastSegment,\n  hasKeys,\n  isDefinitionPath,\n  keys,\n} from '@rline/utils';\nimport { isAbsolute, join } from 'path';\nimport { forEachRef } from './for-each-ref';\nimport { ReadyJSONSchema } from './ready-schema';\n\nexport class SchemaManager {\n  /**\n   * Default rootpath\n   */\n  static defaultRootPath = join(__dirname, './');\n\n  /**\n   * Default mainfilepath\n   */\n  static defaultMainFilePath = join(__dirname, './main.schema.json');\n\n  /**\n   * Default outuptpath\n   */\n  static defaultOutuptPath = join(__dirname, './dist');\n\n  /**\n   * Schem project root directory\n   */\n  protected readonly root: string;\n  /**\n   * Entiry schema file\n   */\n  protected readonly main: string;\n\n  /**\n   * Schema map\n   * @key key absolute filepath\n   * @value schema {@link ReadyJSONSchema}\n   */\n  protected readonly map = new Map();\n\n  constructor(options?: SchemaConfig) {\n    // setting default values\n    this.root = options?.root ?? SchemaManager.defaultRootPath;\n    this.main = options?.main ?? SchemaManager.defaultMainFilePath;\n\n    // validating\n    if (!isAbsolute(this.root)) throw new NotAbsolutePathError();\n    if (!isAbsolute(this.main)) throw new NotAbsolutePathError();\n  }\n\n  /**\n   * Read JSONSchema file by filepath and return the schema\n   * @param filepath\n   * @returns\n   */\n  protected async read(filepath: string) {\n    return await readJSONFile(filepath);\n  }\n\n  /**\n   * Create schema title from schema filepath\n   * @param filepath\n   * @returns\n   */\n  protected title(filepath: string): string {\n    return names(\n      getLastSegment(filepath)\n        .replace('.json', '')\n        .replace('.schema', 'Options')\n    ).pascalCase;\n  }\n\n  /**\n   * Read all descendant schemas under the root directory,\n   * Then set default (required values), $filepath, $dirpath, title, and definitions\n   * Then map them by their own absolute filename path so which will be unique for each file\n   */\n  protected async readAndMapSchemasByAbsolutePath() {\n    await forEachJSONSchemaFile(\n      this.root,\n      async (filepath: string) => {\n        // read the schema file\n        const schema = await this.read(filepath);\n\n        // Set schema title\n        schema.title = this.title(filepath);\n        schema.$filepath = filepath;\n        schema.$dirpath = join(schema.$filepath, '..');\n\n        if (\n          hasKeys(schema, [\n            'type',\n            'title',\n            '$filepath',\n            '$dirpath',\n            'definitions',\n          ])\n        ) {\n          this.map.set(schema.title, schema);\n        } else {\n          throw new MissingPropertyError();\n        }\n      },\n      { recursive: true }\n    );\n  }\n\n  /**\n   * Transform all relative reference paths int he schemas into absolute paths\n   * @param schema\n   */\n  protected toAbsoluteReferencePaths(): void {\n    const __toAbsoluteReferencePaths = (\n      schema: ReadyJSONSchema,\n      $filepath: string\n    ) => {\n      const pairs = Object.entries(schema);\n\n      if (pairs.length > 0) {\n        if (schema.$ref) {\n          // if reference is definition path, then skip\n          if (isDefinitionPath(schema.$ref)) return;\n          // if reference is absolute path, then skip\n          if (isAbsolute(schema.$ref)) return;\n\n          schema.$ref = join($filepath, '..', schema.$ref);\n        } else {\n          for (const [, value] of pairs) {\n            if (typeof value == 'object') {\n              __toAbsoluteReferencePaths(value, $filepath);\n            }\n          }\n        }\n      }\n    };\n\n    this.map.forEach((value, key) => {\n      __toAbsoluteReferencePaths(value, value.$filepath);\n    });\n  }\n\n  /**\n   * Definitions keys is used to store references. So, this function set default value ({}) for each schema\n   **/\n  protected initializeEachDiefintionsIfUndefined() {\n    this.map.forEach((e) => {\n      if (!e.definitions) e.definitions = {};\n    });\n  }\n\n  /**\n   * The ready-schema must have title, $filepath, $dirpath, and definitions key defined.\n   */\n  protected validateSchemas() {\n    this.map.forEach((e) => {\n      if (!e.title) throw new RequiredError();\n      if (!e.$filepath) throw new RequiredError();\n      if (!e.$dirpath) throw new RequiredError();\n      if (!e.definitions) throw new RequiredError();\n    });\n  }\n\n  protected getRootSchema(): ReadyJSONSchema | never {\n    const rootSchema = this.map.get(this.title(this.main));\n    if (!rootSchema) throw new KeyNotFoundError();\n    return rootSchema;\n  }\n\n  /**\n   * Transform a regular schema file into definition by removing unnecessary properties\n   * @param schema\n   * @returns\n   */\n  protected toDefinitionSchema(schema: ReadyJSONSchema): JSONSchema {\n    const cSchema = clone(schema);\n    delete cSchema.title;\n    delete cSchema.$schema;\n    delete cSchema.$dirpath;\n    delete cSchema.$filepath;\n    delete cSchema.definitions;\n    return cSchema;\n  }\n\n  /**\n   * Convert absolute $ref values into definitions\n   */\n  protected toDefinitions() {\n    const rootSchema = this.getRootSchema();\n    for (const e of this.map.values()) {\n      forEachRef(e, (schema, __refSchema) => {\n        if (isDefinitionPath(__refSchema.$ref)) return;\n\n        const refTitle = this.title(__refSchema.$ref);\n        const refSchema = this.map.get(refTitle);\n\n        if (refSchema) {\n          if (schema.title != refSchema.title) {\n            rootSchema.definitions[refSchema.title] =\n              this.toDefinitionSchema(refSchema);\n\n            if (keys(refSchema.definitions).length > 0) {\n              const refDefinitions = entries(refSchema.definitions);\n              for (const [key, value] of refDefinitions) {\n                rootSchema.definitions[key] = value;\n              }\n            }\n          }\n        } else {\n          throw new KeyNotFoundError();\n        }\n      });\n    }\n\n    // Transform $ref paths definition paths\n    for (const e of this.map.values()) {\n      forEachRef(e, (rootSchema, referenceSchema) => {\n        if (isDefinitionPath(referenceSchema.$ref)) return;\n\n        const refSchema = this.map.get(this.title(referenceSchema.$ref));\n        if (refSchema) {\n          referenceSchema.$ref = `#/definitions/${refSchema.title}`;\n        } else {\n          throw new KeyNotFoundError();\n        }\n      });\n    }\n  }\n\n  /**\n   * Write the compiled schema into file\n   */\n  protected async cleanExtras(schema: JSONSchema) {\n    delete schema.$dirpath;\n    delete schema.$filepath;\n\n    return schema;\n  }\n\n  /**\n   * Compile schema\n   */\n  async compile() {\n    await this.readAndMapSchemasByAbsolutePath();\n    this.toAbsoluteReferencePaths();\n    this.initializeEachDiefintionsIfUndefined();\n    this.toDefinitions();\n    this.validateSchemas();\n    const schema = clone(this.getRootSchema());\n\n    return this.cleanExtras(schema);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeManager.html":{"url":"classes/TypeManager.html","title":"class - TypeManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/json-to-type-compiler/type-manager.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                types\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compile\n                            \n                            \n                                    Protected\n                                getType\n                            \n                            \n                                preCompile\n                            \n                            \n                                    Protected\n                                typeName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(schema: JSONSchema)\n                    \n                \n                        \n                            \n                                Defined in src/lib/json-to-type-compiler/type-manager.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        JSONSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/lib/json-to-type-compiler/type-manager.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compile\n                        \n                    \n                \n            \n            \n                \ncompile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-to-type-compiler/type-manager.ts:102\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getType(schema: JSONSchema)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-to-type-compiler/type-manager.ts:24\n                        \n                    \n\n\n            \n                \n                        Schema type is one of\n\n$ref\noneOf\nallOf\ntype: string,number,...\nenum\nproperties\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            JSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        preCompile\n                        \n                    \n                \n            \n            \n                \npreCompile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-to-type-compiler/type-manager.ts:84\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        typeName\n                        \n                    \n                \n            \n            \n                \n                        \n                    typeName(title: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/json-to-type-compiler/type-manager.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                title\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JSONSchema } from '@rline/type';\nimport { entries } from '@rline/utils';\n\nexport class TypeManager {\n  protected types: string[] = [];\n  constructor(protected schema: JSONSchema) {}\n\n  protected typeName(title: string) {\n    return `${title}`;\n  }\n\n  /**\n   * Schema type is one of\n   *\n   * - $ref\n   * - oneOf\n   * - allOf\n   * - type: string,number,...\n   * - enum\n   * - properties\n   * @param schema\n   * @returns\n   */\n  protected getType(schema: JSONSchema): string {\n    if (schema.$ref) {\n      return this.typeName(schema.$ref.split('/').pop());\n    } else if (schema.oneOf) {\n      return `(${schema.oneOf.map((e) => this.getType(e)).join('|')})`;\n    } else if (schema.allOf) {\n      return `(${schema.allOf.map((e) => this.getType(e)).join('&')})`;\n    }\n\n    const __getEnumType = (enums: (string | number)[]) =>\n      enums.map((e) => (typeof e === 'string' ? `'${e}'` : e)).join('|');\n\n    if (schema.const != undefined) {\n      if (typeof schema.const == 'string') {\n        return `'${schema.const}'`;\n      }\n      return `${schema.const}`;\n    }\n    if (schema.type)\n      switch (schema.type) {\n        case 'number':\n        case 'string': {\n          if (schema.enum) return __getEnumType(schema.enum);\n          return schema.type;\n        }\n        case 'integer': {\n          if (schema.enum) return __getEnumType(schema.enum);\n          return 'number';\n        }\n        case 'boolean':\n          return schema.type;\n\n        case 'array': {\n          if (schema.items) return `(${this.getType(schema.items)})[]`;\n          return 'any';\n        }\n        case 'object': {\n          if (schema.properties) {\n            const props: string[] = [];\n\n            const pairs = entries(schema.properties);\n\n            for (const [key, value] of pairs) {\n              props.push(\n                `${key.toString()}${schema.required ? '' : '?'}:${this.getType(\n                  value\n                )}`\n              );\n            }\n\n            return `{ ${props.join('\\n')} }`;\n          }\n\n          return 'any';\n        }\n      }\n\n    return 'unknown';\n  }\n\n  preCompile() {\n    const { definitions } = this.schema;\n    if (!definitions) return;\n\n    const defs = entries(definitions);\n    for (const [key, value] of defs) {\n      this.types.push(\n        `export type ${this.typeName(key)} = ${this.getType(value)}`\n      );\n    }\n\n    this.types.push(\n      `export type ${this.typeName(\n        this.schema.title ?? 'Unkown'\n      )} = ${this.getType(this.schema)}`\n    );\n  }\n\n  compile(): string {\n    this.preCompile();\n    return this.types.join('\\n');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Array\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Boolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _CommonNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _CommonProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Date\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Dto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Encryption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _General\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Icon\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _InputType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Integer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _IntergerPropertyOptionsRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Model\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _ModelName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Number\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _NumberFormat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Object\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _OnDelete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _OnUpdate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Property\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _PropertyName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _PropertyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Relation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _RelationPropertyOptionsRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _RelationType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _String\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _StringFormat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Transform\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _UiProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        assets/schema/bundle.schema.ts\n            \n            type alias\n            _Validation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/init/init.ts\n            \n            function\n            init\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/json-compiler/for-each-ref.ts\n            \n            function\n            forEachRef\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/json-compiler/ready-schema.ts\n            \n            type alias\n            ReadyJSONSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/json-compiler/schema-config.ts\n            \n            function\n            schemaConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/json-compiler/schema-manager.ts\n            \n            class\n            SchemaManager\n            \n                84 %\n                (16/19)\n            \n        \n        \n            \n                \n                src/lib/json-to-type-compiler/type-manager.ts\n            \n            class\n            TypeManager\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/lib/program.ts\n            \n            variable\n            p\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/schema/schema.ts\n            \n            function\n            schema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/tsc/tsc.ts\n            \n            function\n            tsc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/test/__test-utils.ts\n            \n            variable\n            safepath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            variable\n            m\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            ArrayOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            BooleanOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            CommonNumberOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            CommonPropertyOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            DateOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            Dto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            Encryption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            General\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            IconOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            InputTypeOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            IntegerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            IntergerPropertyOptionsRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            ModelNameOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            ModelOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            NumberFormatOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            NumberOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            ObjectOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            OnDelete\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            OnUpdate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            PropertyNameOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            PropertyOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            PropertyTypeOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            RelationOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            RelationPropertyOptionsRaw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            RelationType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            StringFormatOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            StringOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            Transform\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            UiPropertyOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/test/data/schema-dist/model.ts\n            \n            type alias\n            Validation\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @rline/fs : ^9.5.0\n        \n            @rline/is : ^9.5.0\n        \n            @rline/names : ^9.5.0\n        \n            @rline/type : ^9.5.0\n        \n            @rline/utils : ^9.5.0\n        \n            @swc/helpers : ~0.5.11\n        \n            commander : ^13.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            forEachRef   (src/.../for-each-ref.ts)\n                        \n                        \n                            init   (src/.../init.ts)\n                        \n                        \n                            schema   (src/.../schema.ts)\n                        \n                        \n                            schemaConfig   (src/.../schema-config.ts)\n                        \n                        \n                            tsc   (src/.../tsc.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/json-compiler/for-each-ref.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        forEachRef\n                        \n                    \n                \n            \n            \n                \nforEachRef(schema: ReadyJSONSchema, callback: ForEachKeyCallBack)\n                \n            \n\n\n\n\n            \n                \n                        Go through for each refpath\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                            ReadyJSONSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                        ForEachKeyCallBack\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/init/init.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(root: string, templateFileDir: string)\n                \n            \n\n\n\n\n            \n                \n                        Create a json schema project\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    project's root directory\n\n                                            \n                                        \n                                        \n                                                templateFileDir\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the template (default) schema.config.json file\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/lib/schema/schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n            \n                \nschema(options: SchemaConfig)\n                \n            \n\n\n\n\n            \n                \n                        Compile schema files into a single schema file resolving $refs and definitions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            SchemaConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    options SchemaConfig\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/lib/json-compiler/schema-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schemaConfig\n                        \n                    \n                \n            \n            \n                \nschemaConfig(root: string)\n                \n            \n\n\n\n\n            \n                \n                        Get the content of schema configuration file schema.config.json\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                root\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/tsc/tsc.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tsc\n                        \n                    \n                \n            \n            \n                \ntsc(options: SchemaConfig)\n                \n            \n\n\n\n\n            \n                \n                        Compile JSON schemas into typescript types\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            SchemaConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@rline/json\nJSON Compiler CLI\n\nJSON Schema compiler, compiles multiple schemas into a single portable schema file by resolving all references.\n\nTypescript type generator, generate types from json schemas. Supports, allof,oneOf, other complex JSON schema properties.\n\n\nInstallation\nExample :pnpm add -g @rline/jsonUsage\nBefore using any command, the schema project must be initialized.\nInitialize Project\nThe following command creates a new JSON-Schema project has a schema.config.json file to configure project variables.\nExample :json init\nSchema Compiler\nCompiles JSON-Schema files into a single portable schema file\nExample :\njson schemaExample (Schema Compiler)\nThe compiled schema will be saved in the output directory provided in schema.config.json\nExample :json schemaTypescript Compiler\nThe compiled type will be saved in the output directory provided in the schema.config.json\nExample :json tscDocumentation\nDetailed documentation Documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 9.5.0\n        \n            Description : JSON Schema compiler\n        \n            Keywords : json, schema, compiler, json compiler, cli, typescript, type generator, json-to-typescript\n        \n            Homepage : https://rbrightline.github.io/common/json\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/common/tree/main/libs/json\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            m   (src/.../model.ts)\n                        \n                        \n                            p   (src/.../program.ts)\n                        \n                        \n                            safepath   (src/.../__test-utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test/data/schema-dist/model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        m\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ModelOptions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n\n        \n    \n\n    src/lib/program.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        p\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createPathScope(cwd())\n                    \n                \n\n            \n                \n                    Safe path\n\n                \n            \n\n        \n    \n\n    src/test/__test-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        safepath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createPathScope(join(__dirname, './data'))\n                    \n                \n\n            \n                \n                    Root: ./schema\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
