var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.888]],["body/coverage.html",[0,1.294,1,1.294,2,1.294,3,1.605,4,1.81,5,1.81,6,1.308,7,1.605,8,2.281,9,1.308,10,3.374,11,0.112,12,3.374,13,2.83,14,1.81,15,1.81,16,1.308,17,0.682,18,1.294,19,1.294,20,1.294,21,0.954,22,1.308,23,1.294,24,0.7,25,1.81,26,1.81,27,1.81,28,0.079,29,0.079]],["title/dependencies.html",[30,1.21,31,1.693]],["body/dependencies.html",[11,0.11,28,0.104,29,0.104,31,1.977,32,2.765,33,2.765]],["title/miscellaneous/functions.html",[34,0.655,35,1.693]],["body/miscellaneous/functions.html",[3,1.243,6,0.476,7,1.129,8,1.051,9,0.98,11,0.101,16,0.476,17,0.511,18,0.646,19,1.051,20,0.646,21,0.98,22,0.476,23,1.051,24,0.35,28,0.047,29,0.047,34,0.35,35,0.646,36,0.476,37,0.646,38,0.646,39,0.904,40,0.904,41,0.646,42,0.904,43,3.42,44,1.471,45,0.904,46,0.98,47,0.719,48,0.829,49,2.357,50,1.592,51,2.776,52,1.859,53,1.859,54,2.357,55,2.357,56,0.904,57,1.471,58,1.471,59,2.357,60,1.859,61,1.859,62,1.806,63,1.329,64,0.904,65,0.904,66,1.051,67,1.471,68,1.471,69,1.471,70,2.527,71,0.904,72,0.904,73,0.904,74,0.904,75,1.471,76,0.904,77,0.904,78,0.904,79,0.904,80,0.904,81,0.904,82,0.904,83,0.904,84,0.904,85,0.904,86,0.904,87,1.471,88,0.904,89,0.904,90,1.859,91,1.859,92,1.471,93,1.859,94,0.904,95,1.471,96,1.471,97,0.904,98,0.904,99,0.904,100,1.859,101,0.904,102,1.471,103,1.471,104,1.471,105,0.904,106,0.904,107,0.904,108,0.904,109,0.904,110,0.904,111,0.904,112,0.904,113,0.904,114,0.904,115,0.904,116,0.904,117,0.904,118,0.904,119,0.904,120,0.904,121,0.904,122,0.904,123,0.904,124,0.904,125,0.904]],["title/index.html",[36,0.892,126,1.693,127,1.693]],["body/index.html",[1,1.344,2,0.882,11,0.118,17,0.626,21,0.651,24,0.477,28,0.06,29,0.06,46,0.651,47,0.727,48,0.881,50,1.342,128,1.234,129,1.234,130,1.234,131,1.234,132,1.234,133,1.234,134,1.234,135,3.001,136,1.234,137,1.234,138,1.234,139,1.234,140,1.88,141,3.552,142,0.882,143,1.88,144,1.234,145,1.234,146,0.882,147,1.234,148,1.234,149,1.234,150,1.234,151,1.234,152,1.234,153,1.234,154,1.234,155,1.234,156,1.234,157,1.234,158,1.234,159,1.234,160,1.234,161,1.234,162,1.234,163,1.234,164,1.234,165,1.234,166,1.234,167,1.234,168,1.234,169,1.234,170,1.234,171,1.234,172,1.234,173,1.234,174,1.234,175,1.234,176,1.234,177,1.234,178,1.88,179,1.234,180,1.88,181,1.234,182,1.234,183,1.234,184,1.234,185,1.234,186,1.234,187,1.234,188,1.234,189,1.234,190,1.234,191,1.234,192,1.234,193,1.234,194,1.234]],["title/modules.html",[195,1.888]],["body/modules.html",[11,0.105,28,0.105,29,0.105,195,2.031]],["title/overview.html",[196,1.888]],["body/overview.html",[11,0.105,28,0.105,29,0.105,196,2.031]],["title/properties.html",[30,1.21,197,1.693]],["body/properties.html",[11,0.115,17,0.767,28,0.089,29,0.089,47,1.195,48,1.195,50,1.137,62,1.543,63,1.543,142,1.543,146,1.543,197,1.543,198,2.789,199,2.158,200,2.158,201,2.158,202,2.158,203,2.158,204,2.158,205,2.158,206,2.158,207,2.158,208,2.158,209,2.158,210,2.158,211,2.158]],["title/miscellaneous/typealiases.html",[34,0.655,212,2.369]],["body/miscellaneous/typealiases.html",[3,1.717,6,1.13,7,1.717,9,1.464,11,0.089,16,1.13,17,0.763,22,1.13,24,1.074,28,0.089,29,0.089,34,0.829,36,1.13,37,1.532,38,1.532,41,1.532,46,1.13,47,0.829,48,0.829,66,1.532,213,2.143,214,3.08,215,2.777,216,2.143,217,2.143,218,2.143,219,2.143,220,2.143]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":14,"title":{},"body":{"coverage.html":{}}}],["0.5.11",{"_index":33,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":15,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":12,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":10,"title":{},"body":{"coverage.html":{}}}],["9.2.0",{"_index":199,"title":{},"body":{"properties.html":{}}}],["add",{"_index":137,"title":{},"body":{"index.html":{}}}],["adding",{"_index":89,"title":{},"body":{"miscellaneous/functions.html":{}}}],["alias",{"_index":13,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":213,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["api",{"_index":47,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["applied",{"_index":108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["auth",{"_index":45,"title":{},"body":{"miscellaneous/functions.html":{}}}],["authentication",{"_index":132,"title":{},"body":{"index.html":{}}}],["author",{"_index":209,"title":{},"body":{"properties.html":{}}}],["authpaths",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["authpaths(prefix",{"_index":42,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":91,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boxes",{"_index":169,"title":{},"body":{"index.html":{}}}],["brightline",{"_index":211,"title":{},"body":{"properties.html":{}}}],["brushes",{"_index":173,"title":{},"body":{"index.html":{}}}],["buses",{"_index":167,"title":{},"body":{"index.html":{}}}],["buzzes",{"_index":171,"title":{},"body":{"index.html":{}}}],["camelcase",{"_index":69,"title":{},"body":{"miscellaneous/functions.html":{}}}],["capitalized",{"_index":114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["capitalizing",{"_index":94,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":59,"title":{},"body":{"miscellaneous/functions.html":{}}}],["categories",{"_index":143,"title":{},"body":{"index.html":{}}}],["categories/count",{"_index":153,"title":{},"body":{"index.html":{}}}],["category",{"_index":145,"title":{},"body":{"index.html":{}}}],["category/:id",{"_index":147,"title":{},"body":{"index.html":{}}}],["category/:id/:relationname",{"_index":155,"title":{},"body":{"index.html":{}}}],["category/:id/:relationname/:relationid",{"_index":157,"title":{},"body":{"index.html":{}}}],["category/:id/decrement",{"_index":151,"title":{},"body":{"index.html":{}}}],["category/:id/file",{"_index":158,"title":{},"body":{"index.html":{}}}],["category/:id/img",{"_index":160,"title":{},"body":{"index.html":{}}}],["category/:id/increment",{"_index":149,"title":{},"body":{"index.html":{}}}],["cats",{"_index":164,"title":{},"body":{"index.html":{}}}],["checks",{"_index":109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["churches",{"_index":175,"title":{},"body":{"index.html":{}}}],["const",{"_index":140,"title":{},"body":{"index.html":{}}}],["constant_case",{"_index":72,"title":{},"body":{"miscellaneous/functions.html":{}}}],["constcase",{"_index":71,"title":{},"body":{"miscellaneous/functions.html":{}}}],["containing",{"_index":68,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contains",{"_index":110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controllername",{"_index":80,"title":{},"body":{"miscellaneous/functions.html":{}}}],["conventions",{"_index":217,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["count",{"_index":152,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":130,"title":{},"body":{"index.html":{}}}],["custom",{"_index":98,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decrement",{"_index":150,"title":{},"body":{"index.html":{}}}],["default",{"_index":52,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defaults",{"_index":124,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":63,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["detailed",{"_index":194,"title":{},"body":{"index.html":{}}}],["different",{"_index":66,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dollar",{"_index":112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":122,"title":{},"body":{"miscellaneous/functions.html":{}}}],["empty",{"_index":125,"title":{},"body":{"miscellaneous/functions.html":{}}}],["endpoints",{"_index":220,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["english",{"_index":117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["example",{"_index":135,"title":{},"body":{"index.html":{}}}],["example.name',documentation",{"_index":193,"title":{},"body":{"index.html":{}}}],["example_name",{"_index":180,"title":{},"body":{"index.html":{}}}],["examplename",{"_index":178,"title":{},"body":{"index.html":{}}}],["examplenamecontroller",{"_index":186,"title":{},"body":{"index.html":{}}}],["examplenamemodule",{"_index":190,"title":{},"body":{"index.html":{}}}],["examplenameservice",{"_index":188,"title":{},"body":{"index.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["first",{"_index":95,"title":{},"body":{"miscellaneous/functions.html":{}}}],["following",{"_index":116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format",{"_index":70,"title":{},"body":{"miscellaneous/functions.html":{}}}],["formats",{"_index":60,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":8,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":35,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":44,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generates",{"_index":57,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":126,"title":{"index.html":{}},"body":{}}],["given",{"_index":61,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grammer",{"_index":118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["homepage",{"_index":203,"title":{},"body":{"properties.html":{}}}],["https://github.com/rbrightline/common/tree/main/libs/names",{"_index":208,"title":{},"body":{"properties.html":{}}}],["https://rbrightline.github.io/common/names",{"_index":204,"title":{},"body":{"properties.html":{}}}],["id",{"_index":146,"title":{},"body":{"index.html":{},"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["img",{"_index":159,"title":{},"body":{"index.html":{}}}],["increment",{"_index":148,"title":{},"body":{"index.html":{}}}],["index",{"_index":36,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["input",{"_index":100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["installation",{"_index":134,"title":{},"body":{"index.html":{}}}],["kebab",{"_index":74,"title":{},"body":{"miscellaneous/functions.html":{}}}],["kebabcase",{"_index":73,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keywords",{"_index":200,"title":{},"body":{"properties.html":{}}}],["letter",{"_index":96,"title":{},"body":{"miscellaneous/functions.html":{}}}],["letters",{"_index":93,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":205,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":214,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["matching",{"_index":29,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":34,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mit",{"_index":206,"title":{},"body":{"properties.html":{}}}],["modulename",{"_index":84,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":195,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":50,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["namecontroller",{"_index":81,"title":{},"body":{"miscellaneous/functions.html":{}}}],["namemodule",{"_index":85,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["names('example",{"_index":176,"title":{},"body":{"index.html":{}}}],["names(resourcename",{"_index":56,"title":{},"body":{"miscellaneous/functions.html":{}}}],["names.camelcase",{"_index":177,"title":{},"body":{"index.html":{}}}],["names.constcase",{"_index":179,"title":{},"body":{"index.html":{}}}],["names.controllername",{"_index":185,"title":{},"body":{"index.html":{}}}],["names.dotcase",{"_index":192,"title":{},"body":{"index.html":{}}}],["names.kebabcase",{"_index":181,"title":{},"body":{"index.html":{}}}],["names.modulename",{"_index":189,"title":{},"body":{"index.html":{}}}],["names.pascalcase",{"_index":182,"title":{},"body":{"index.html":{}}}],["names.sentencecase",{"_index":191,"title":{},"body":{"index.html":{}}}],["names.servicename",{"_index":187,"title":{},"body":{"index.html":{}}}],["names.snakecase",{"_index":183,"title":{},"body":{"index.html":{}}}],["names.titlecase",{"_index":184,"title":{},"body":{"index.html":{}}}],["nameservice",{"_index":83,"title":{},"body":{"miscellaneous/functions.html":{}}}],["naming",{"_index":216,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["new",{"_index":25,"title":{},"body":{"coverage.html":{}}}],["normalization",{"_index":106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["normalize",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["normalize(value",{"_index":86,"title":{},"body":{"miscellaneous/functions.html":{}}}],["normalized",{"_index":104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["normalizes",{"_index":88,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":67,"title":{},"body":{"miscellaneous/functions.html":{}}}],["open",{"_index":202,"title":{},"body":{"properties.html":{}}}],["optional",{"_index":51,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optionally",{"_index":97,"title":{},"body":{"miscellaneous/functions.html":{}}}],["output",{"_index":141,"title":{},"body":{"index.html":{}}}],["overview",{"_index":196,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":30,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":49,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pascalcase",{"_index":75,"title":{},"body":{"miscellaneous/functions.html":{}}}],["path",{"_index":123,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paths",{"_index":48,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["paths.ts",{"_index":7,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["people",{"_index":162,"title":{},"body":{"index.html":{}}}],["plural",{"_index":142,"title":{},"body":{"index.html":{},"properties.html":{}}}],["pluralize",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pluralize('box",{"_index":168,"title":{},"body":{"index.html":{}}}],["pluralize('brush",{"_index":172,"title":{},"body":{"index.html":{}}}],["pluralize('bus",{"_index":166,"title":{},"body":{"index.html":{}}}],["pluralize('buzz",{"_index":170,"title":{},"body":{"index.html":{}}}],["pluralize('cat",{"_index":163,"title":{},"body":{"index.html":{}}}],["pluralize('category",{"_index":165,"title":{},"body":{"index.html":{}}}],["pluralize('church",{"_index":174,"title":{},"body":{"index.html":{}}}],["pluralize('person",{"_index":161,"title":{},"body":{"index.html":{}}}],["pluralize(word",{"_index":115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pnpm",{"_index":136,"title":{},"body":{"index.html":{}}}],["pre",{"_index":99,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"miscellaneous/functions.html":{}}}],["preinputvalidator",{"_index":87,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepend",{"_index":121,"title":{},"body":{"miscellaneous/functions.html":{}}}],["properties",{"_index":197,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["provided",{"_index":102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relation",{"_index":154,"title":{},"body":{"index.html":{}}}],["relationid",{"_index":156,"title":{},"body":{"index.html":{}}}],["repository",{"_index":207,"title":{},"body":{"properties.html":{}}}],["represents",{"_index":215,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resource",{"_index":62,"title":{},"body":{"miscellaneous/functions.html":{},"properties.html":{}}}],["resourcename",{"_index":64,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rest",{"_index":46,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restapipaths",{"_index":24,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["restfull",{"_index":131,"title":{},"body":{"index.html":{}}}],["restpaths",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["restpaths('category",{"_index":139,"title":{},"body":{"index.html":{}}}],["restpaths(name",{"_index":120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":28,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":55,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rline",{"_index":201,"title":{},"body":{"properties.html":{}}}],["rline/names",{"_index":128,"title":{},"body":{"index.html":{}}}],["rline/namesusage",{"_index":138,"title":{},"body":{"index.html":{}}}],["robert",{"_index":210,"title":{},"body":{"properties.html":{}}}],["service",{"_index":133,"title":{},"body":{"index.html":{}}}],["servicename",{"_index":82,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signs",{"_index":113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["singular",{"_index":144,"title":{},"body":{"index.html":{}}}],["snake_case",{"_index":77,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snakecase",{"_index":76,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spaces",{"_index":90,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../auth",{"_index":37,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../names.ts",{"_index":38,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../normalize.ts",{"_index":39,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pluralize.ts",{"_index":40,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../rest",{"_index":41,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/auth",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/names.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/normalize.ts",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/pluralize.ts",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/lib/rest",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":127,"title":{"index.html":{}},"body":{}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":43,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strings",{"_index":218,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["swc/helpers",{"_index":32,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":27,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":26,"title":{},"body":{"coverage.html":{}}}],["title",{"_index":79,"title":{},"body":{"miscellaneous/functions.html":{}}}],["titlecase",{"_index":78,"title":{},"body":{"miscellaneous/functions.html":{}}}],["transformed",{"_index":65,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":212,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["underscores",{"_index":111,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uppercase",{"_index":92,"title":{},"body":{"miscellaneous/functions.html":{}}}],["used",{"_index":219,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["utilities",{"_index":129,"title":{},"body":{"index.html":{}}}],["validate",{"_index":103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validation",{"_index":107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":53,"title":{},"body":{"miscellaneous/functions.html":{}}}],["various",{"_index":58,"title":{},"body":{"miscellaneous/functions.html":{}}}],["version",{"_index":198,"title":{},"body":{"properties.html":{}}}],["word",{"_index":119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yes",{"_index":105,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/lib/auth-paths.ts\n            \n            function\n            authPaths\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/auth-paths.ts\n            \n            type alias\n            AuthPaths\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/lib/names.ts\n            \n            function\n            names\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/names.ts\n            \n            type alias\n            Names\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/normalize.ts\n            \n            function\n            normalize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/pluralize.ts\n            \n            function\n            pluralize\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/rest-paths.ts\n            \n            function\n            restPaths\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/lib/rest-paths.ts\n            \n            type alias\n            RestApiPaths\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @swc/helpers : ~0.5.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authPaths   (src/.../auth-paths.ts)\n                        \n                        \n                            names   (src/.../names.ts)\n                        \n                        \n                            normalize   (src/.../normalize.ts)\n                        \n                        \n                            pluralize   (src/.../pluralize.ts)\n                        \n                        \n                            restPaths   (src/.../rest-paths.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth-paths.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authPaths\n                        \n                    \n                \n            \n            \n                \nauthPaths(prefix: string)\n                \n            \n\n\n\n\n            \n                \n                        Generate auth-rest-api paths\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthPaths\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/names.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n            \n                \nnames(resourceName: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates various case formats for a given resource name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                resourceName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the resource to be transformed into different case formats.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Names\n\n                        \n                            \n                                An object containing the resource name in different case formats:\n\ncamelCase: camelCase format.\nconstCase: CONSTANT_CASE format.\nkebabCase: kebab-case format.\npascalCase: PascalCase format.\nsnakeCase: snake_case format.\ntitleCase: Title Case format.\ncontrollerName: NameController.\nserviceName: Nameservice.\nmoduleName: NameModule.\n\n\n                            \n                \n            \n        \n    \n    src/lib/normalize.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        normalize\n                        \n                    \n                \n            \n            \n                \nnormalize(value: string, preInputValidator?)\n                \n            \n\n\n\n\n            \n                \n                        Normalizes a given string by adding spaces before uppercase letters and capitalizing the first letter.\nOptionally, a custom pre-input validator function can be provided to validate the input string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe string to be normalized.\n\n\n                                            \n                                        \n                                        \n                                                preInputValidator\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional function to validate the input string before normalization.\nIf not provided, a default validation is applied which checks if the string\ncontains only letters, underscores, dollar signs, and spaces.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The normalized string with spaces before uppercase letters and the first letter capitalized.\n\n                            \n                \n            \n        \n    \n    src/lib/pluralize.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pluralize\n                        \n                    \n                \n            \n            \n                \npluralize(word: string)\n                \n            \n\n\n\n\n            \n                \n                        Pluralize string following english grammer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                word\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/rest-paths.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        restPaths\n                        \n                    \n                \n            \n            \n                \nrestPaths(name: string, prefix: string)\n                \n            \n\n\n\n\n            \n                \n                        Generates REST API paths for a given resource name with an optional prefix.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe name of the resource for which to generate paths.\n\n\n                                            \n                                        \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                            \n                                                    \nAn optional prefix to prepend to each path. Defaults to an empty string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         RestApiPaths\n\n                        \n                            \n                                An object containing various REST API paths for the resource.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n@rline/names\nUtilities to create names, restfull api paths, and authentication service paths.\nInstallation\nExample :pnpm add @rline/namesUsage\nRest api paths\nExample :restPaths('category');\n\nconst output: RestApiPaths = {\n  plural: 'categories',\n  singular: 'category',\n  id: 'category/:id',\n  increment: 'category/:id/increment',\n  decrement: 'category/:id/decrement',\n  count: 'categories/count',\n  relation: 'category/:id/:relationName',\n  relationId: 'category/:id/:relationName/:relationId',\n  file: 'category/:id/file',\n  img: 'category/:id/img',\n};Pluralize\nExample :pluralize('person'); // output : 'people'\npluralize('cat'); // output : 'cats'\npluralize('category'); // output : 'categories'\npluralize('bus'); // output : 'buses'\npluralize('box'); // output : 'boxes'\npluralize('buzz'); // output : 'buzzes'\npluralize('brush'); // output : 'brushes'\npluralize('church'); // output : 'churches'\n// ...Names\nExample :const Names = names('example   name');\n\nNames.camelCase; // output:  'exampleName',\nNames.constCase; // output:  'EXAMPLE_NAME',\nNames.kebabCase; // output:  'example-name',\nNames.pascalCase; // output:  'ExampleName',\nNames.snakeCase; // output:  'example_name',\nNames.titleCase; // output:  'Example Name',\nNames.controllerName; // output:  'ExampleNameController',\nNames.serviceName; // output:  'ExampleNameService',\nNames.moduleName; // output:  'ExampleNameModule',\nNames.sentenceCase; // output:  'Example name',\nNames.dotCase; // output:  'example.name',Documentation\nDetailed documentation Documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 9.2.0\n        \n            Description : All version of names and resource paths\n        \n            Keywords : name, names, rline, plural, api, id, paths, open-api, api paths\n        \n            Homepage : https://rbrightline.github.io/common/names\n        \n            License : MIT\n        \n            Repository : https://github.com/rbrightline/common/tree/main/libs/names\n        \n            Author : Robert Brightline\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthPaths   (src/.../auth-paths.ts)\n                        \n                        \n                            Names   (src/.../names.ts)\n                        \n                        \n                            RestApiPaths   (src/.../rest-paths.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth-paths.ts\n    \n    \n        \n            \n                \n                    \n                    AuthPaths\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/names.ts\n    \n    \n        \n            \n                \n                    \n                    Names\n                \n            \n            \n                \n                    Represents different naming conventions for strings.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/rest-paths.ts\n    \n    \n        \n            \n                \n                    \n                    RestApiPaths\n                \n            \n            \n                \n                    Represents the paths used in REST API endpoints.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
